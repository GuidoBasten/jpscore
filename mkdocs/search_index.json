{
    "docs": [
        {
            "location": "/", 
            "text": "JPScore\n\n\nCore module for simulation and computing of trajectories.\n\n\n\n\n\n\n\n\n\n\n\nNote\n: When reporting bugs, please make sure to use the development branch \nv0.8\n.  \n\n\n\n\nJuPedSim comes with four loosely coupled modules: \n\n\n\n\nJPScore: The simulation core\n\n\nJPSvis\n: Geometry and trajectories visualization tool\n\n\nJPSreport\n: Implementation of different measurement methods to evaluate out of trajectories the density, the velocity and the flow.\n\n\nJPSreditor\n: Geometry editor.\n\n\n\n\nUsage\n\n\njpscore\n is called  with initialization files (inifiles):\n\n\n jpscore config.xml\n\n\n\n\nwith \nconfig.xml\n a structured \nxml\n project file containing parameter definitions, agents distributions and other \nimportant configurations to run a simulation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEverybody is welcome to contribute to the project, but first have a look at", 
            "title": "Home"
        }, 
        {
            "location": "/#jpscore", 
            "text": "Core module for simulation and computing of trajectories.     Note : When reporting bugs, please make sure to use the development branch  v0.8 .     JuPedSim comes with four loosely coupled modules:    JPScore: The simulation core  JPSvis : Geometry and trajectories visualization tool  JPSreport : Implementation of different measurement methods to evaluate out of trajectories the density, the velocity and the flow.  JPSreditor : Geometry editor.", 
            "title": "JPScore"
        }, 
        {
            "location": "/#usage", 
            "text": "jpscore  is called  with initialization files (inifiles):   jpscore config.xml  with  config.xml  a structured  xml  project file containing parameter definitions, agents distributions and other \nimportant configurations to run a simulation.               Everybody is welcome to contribute to the project, but first have a look at", 
            "title": "Usage"
        }, 
        {
            "location": "/user_guide/requirements/", 
            "text": "Requirements\n\n\n\n\nCMake\n\n\nA compiler with support for C++11 e.g. \ng++\n or \nclang\n or \nVisual Studio 2013\n\n\nfor \nJPSvis\n and \nJPSeditor\n additionally \nQt\n and \nVTK\n are needed.\n\n\nJPSreport\n and \nJPScore\n need \nBoost-libraries\n. At the moment boost is hard-linked in \nJPSreport\n, but this should be fixed in the future.\n\n\n\n\nJuPedSim offers a Vagrant image that comes with all the necessary\npackages and libraries. See for more information \nhere\n.", 
            "title": "Requirements"
        }, 
        {
            "location": "/user_guide/requirements/#requirements", 
            "text": "CMake  A compiler with support for C++11 e.g.  g++  or  clang  or  Visual Studio 2013  for  JPSvis  and  JPSeditor  additionally  Qt  and  VTK  are needed.  JPSreport  and  JPScore  need  Boost-libraries . At the moment boost is hard-linked in  JPSreport , but this should be fixed in the future.   JuPedSim offers a Vagrant image that comes with all the necessary\npackages and libraries. See for more information  here .", 
            "title": "Requirements"
        }, 
        {
            "location": "/user_guide/configuration/", 
            "text": "Installation\n\n\nJuPedSim-modules can not be installed but compiled.\n\n\nFor all  modules the compilation is fairly straightforward: \n\n\n\n\nCreate a new directory and change to it\n\n\n\n\nmkdir build \n cd build\n\n\n\n\n\n\nRun \nCMake\n to build the project\n\n\n\n\ncmake .. \n\n\n\n\ncmake\n will check if all required  libraries are installed. \n- Compile the project\nIf the previous step terminated successfully run \n\n\nmake -jN\n\n\n\n\n(\nN\n is the number of your CPUs)\n\n\n\n\nRun a simulation\nIf the compilation succeeded a binary will be produced in\nthe direction \nbin\n. Run a simulation using one of\nthe ini files in the directory \ninitfiles\n\n\n\n\nFor example:\n\n\n./bin/jpscore inputfiles/Bottleneck/1.1_ini-Bottleneck.xml\n\n\n\n\nUsing an IDE\n\n\n\n\n\n\nCLion\n (Windows, Linux, Mac)\n\n\nCLion\n has build in \nCMake\n-support so you only have to start a new project an set the project root to your \njpscore\n directory.\n\n\n\n\n\n\nEclipse\n (Windows, Linux, Mac)\n\n\nBuild an \nEclipse Project\n with \nCMake\n or the \nCMake-gui\n and open it with \nEclipse\n.\n\n\n\n\n\n\nVisual Studio 2013\n (v0.6+, Windows) \n\n\nRun the \nCMake-gui\n with the generator \nVisual Studio 12 (2013)\n and click on the \n*.sln\n file to open it in Visual Studio.\n\n\nThen click on \nbuild-\nbuild solution\n.\nThis should build your code.\n\n\nCurrent issues are known with the python test cases. Most of them are Unix specific.\nHowever the compilation of \njpscore\n works fine. \n\n\n\n\n\n\nXCode (v0.6+ Mac)\n\n\nRun the \nCMake-gui\n and generate an \nXCode\n-Project then open it with \nXCode\n.\n\n\nOn Mac the standard compiler is clang/clang++.\nIf the project compiles out of your console via cmake/make that does not mean it also compiles out of \nXCode\n.\n\nXCode\n forces some more strict rules while compiling.\n\n\nFor instance, there was one error we could not explain:\n\nXCode\n seems not to know that \nstd::unordered_map.embrace(...)\n is a valid function call\nand returns with an error message.\n\n\nHowever this is an \nXCode\n-specific problem. It does not occur if you are using e.g. \nCLion\n.\n\n\nEven if you compile out of console with the same compiler this throws no error. \n\n\nYou can avoid this by using the function \nstd::unordered_map.insert(std::make_pair(...))\n instead.", 
            "title": "Configuration"
        }, 
        {
            "location": "/user_guide/configuration/#installation", 
            "text": "JuPedSim-modules can not be installed but compiled.  For all  modules the compilation is fairly straightforward:    Create a new directory and change to it   mkdir build   cd build   Run  CMake  to build the project   cmake ..   cmake  will check if all required  libraries are installed. \n- Compile the project\nIf the previous step terminated successfully run   make -jN  ( N  is the number of your CPUs)   Run a simulation\nIf the compilation succeeded a binary will be produced in\nthe direction  bin . Run a simulation using one of\nthe ini files in the directory  initfiles   For example:  ./bin/jpscore inputfiles/Bottleneck/1.1_ini-Bottleneck.xml", 
            "title": "Installation"
        }, 
        {
            "location": "/user_guide/configuration/#using-an-ide", 
            "text": "CLion  (Windows, Linux, Mac)  CLion  has build in  CMake -support so you only have to start a new project an set the project root to your  jpscore  directory.    Eclipse  (Windows, Linux, Mac)  Build an  Eclipse Project  with  CMake  or the  CMake-gui  and open it with  Eclipse .    Visual Studio 2013  (v0.6+, Windows)   Run the  CMake-gui  with the generator  Visual Studio 12 (2013)  and click on the  *.sln  file to open it in Visual Studio.  Then click on  build- build solution .\nThis should build your code.  Current issues are known with the python test cases. Most of them are Unix specific.\nHowever the compilation of  jpscore  works fine.     XCode (v0.6+ Mac)  Run the  CMake-gui  and generate an  XCode -Project then open it with  XCode .  On Mac the standard compiler is clang/clang++.\nIf the project compiles out of your console via cmake/make that does not mean it also compiles out of  XCode . XCode  forces some more strict rules while compiling.  For instance, there was one error we could not explain: XCode  seems not to know that  std::unordered_map.embrace(...)  is a valid function call\nand returns with an error message.  However this is an  XCode -specific problem. It does not occur if you are using e.g.  CLion .  Even if you compile out of console with the same compiler this throws no error.   You can avoid this by using the function  std::unordered_map.insert(std::make_pair(...))  instead.", 
            "title": "Using an IDE"
        }, 
        {
            "location": "/user_guide/vagrant/", 
            "text": "Preconfigured virtual environment\n\n\nIn order to compile a \nJuPedSim\n package, one needs to install some required \npackages and libraries\n, e.g. \nboost\n or even a compiler (\ng++\n) or \ncmake\n.\n\n\nHere, \nVagrant\n can work some magic and help isolating dependencies and their configuration within a single disposable, consistent environment. \n\n\nTherefore, users, whether they are working on Linux, Mac OS X, or Windows, can compile and run code in the same environment, against the same dependencies, all configured the same way. \n\n\nTo learn more about \nVagrant\n this \npage\n will get you started.\n\n\nVirtualBox\n must be installed on its own prior to using \nVagrant\n.\n\n\nVirtualBox\n can be installed by \ndownloading\n a package or installer for your operating system and using standard procedures to install that package.\n\n\nHow it works?\n\n\nBasically, we will create, configure and distribute an environment where \nJuPedSim\n can be\ncompiled and run without the necessity to pre-install any dependencies.\n\n\nWith \nVagrant\n we can create a \nBox\n that can be used with \nVirtualBox\n or directly by \nVagrant\n. \n\n\nOnce connected to this \nvirtual\n machine, the user can compile, run, edit or even git push the code.\n\n\nDownload and install Vagrant\n\n\nDownload a binary from the official \nwebpage\n.\nThe installation is straightforward. \n\n\nStart out with Vagrant\n\n\nIn the Terminal \n\n\nmkdir vagrant_test \n cd vagrant_test\n\n\n\n\nTo start working\n\n\nvagrant init chraibi/jpscore\n\n\n\n\nThis will download an Ubuntu-image for \nVagrant\n, which contains all packages necessary to work with \njpscore\n. \n\n\nThe original image\ns name is \nubuntu/trusty64\n was modified by installing packages like \ng++\n, \ngit\n, \ncmake\n and \nboost\n.\n\n\nStart Vagrant\n\n\nvagrant up\n\n\n\n\nConnect to the machine\n\n\nvagrant ssh\n\n\n\n\nThis will connect you to your virtual machine. See also the following screen-shot\n\n\n\n\n\n\n\nIf asked to give a password give \nvagrant\n.\n\n\nTesting a box\n\n\nAn alternative use of the \njpscore-vagrant-image\n is to get yourself a \nbox-file\n and open it with \nVagrant\n as follows\n\n\nvagrant box add my-box /path/to/the/new.box\n\nvagrant init my-box\n\nvagrant up\n\n\n\n\nA box for \njpscore\n can be found \nhere\n.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#preconfigured-virtual-environment", 
            "text": "In order to compile a  JuPedSim  package, one needs to install some required  packages and libraries , e.g.  boost  or even a compiler ( g++ ) or  cmake .  Here,  Vagrant  can work some magic and help isolating dependencies and their configuration within a single disposable, consistent environment.   Therefore, users, whether they are working on Linux, Mac OS X, or Windows, can compile and run code in the same environment, against the same dependencies, all configured the same way.   To learn more about  Vagrant  this  page  will get you started.  VirtualBox  must be installed on its own prior to using  Vagrant .  VirtualBox  can be installed by  downloading  a package or installer for your operating system and using standard procedures to install that package.", 
            "title": "Preconfigured virtual environment"
        }, 
        {
            "location": "/user_guide/vagrant/#how-it-works", 
            "text": "Basically, we will create, configure and distribute an environment where  JuPedSim  can be\ncompiled and run without the necessity to pre-install any dependencies.  With  Vagrant  we can create a  Box  that can be used with  VirtualBox  or directly by  Vagrant .   Once connected to this  virtual  machine, the user can compile, run, edit or even git push the code.", 
            "title": "How it works?"
        }, 
        {
            "location": "/user_guide/vagrant/#download-and-install-vagrant", 
            "text": "Download a binary from the official  webpage .\nThe installation is straightforward.", 
            "title": "Download and install Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#start-out-with-vagrant", 
            "text": "In the Terminal   mkdir vagrant_test   cd vagrant_test  To start working  vagrant init chraibi/jpscore  This will download an Ubuntu-image for  Vagrant , which contains all packages necessary to work with  jpscore .   The original image s name is  ubuntu/trusty64  was modified by installing packages like  g++ ,  git ,  cmake  and  boost .", 
            "title": "Start out with Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#start-vagrant", 
            "text": "vagrant up", 
            "title": "Start Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#connect-to-the-machine", 
            "text": "vagrant ssh  This will connect you to your virtual machine. See also the following screen-shot    If asked to give a password give  vagrant .", 
            "title": "Connect to the machine"
        }, 
        {
            "location": "/user_guide/vagrant/#testing-a-box", 
            "text": "An alternative use of the  jpscore-vagrant-image  is to get yourself a  box-file  and open it with  Vagrant  as follows  vagrant box add my-box /path/to/the/new.box\n\nvagrant init my-box\n\nvagrant up  A box for  jpscore  can be found  here .", 
            "title": "Testing a box"
        }, 
        {
            "location": "/user_guide/quickstart/", 
            "text": "Get started\n\n\nAfter succesfully \ncompiling\n the code you can just run\n\njpscore\n in a Terminal as follows:\n\n\n./bin/jpscore inifile.xml\n\n\n\n\ninifile.xml\n defines all the needed information to start a simulation with\n\njpscore\n. See  the specifications of the \nfile format\n.\n\n\nAfter a successful simulation an additional xml-file will be created in\nthe same directory as the used inifile. It contains discrete values\nfor the trajectories of the agents.\n\n\nYou can visualize the produced trajectory file with \njpscore\n as follows\n\n\n/path/to/jpsvis  trajectory.xml", 
            "title": "Quickstart"
        }, 
        {
            "location": "/user_guide/quickstart/#get-started", 
            "text": "After succesfully  compiling  the code you can just run jpscore  in a Terminal as follows:  ./bin/jpscore inifile.xml  inifile.xml  defines all the needed information to start a simulation with jpscore . See  the specifications of the  file format .  After a successful simulation an additional xml-file will be created in\nthe same directory as the used inifile. It contains discrete values\nfor the trajectories of the agents.  You can visualize the produced trajectory file with  jpscore  as follows  /path/to/jpsvis  trajectory.xml", 
            "title": "Get started"
        }, 
        {
            "location": "/user_guide/data_formats/", 
            "text": "File formats\n\n\nJuPedSim uses three different files:\n\n\n\n\ninifiles, \n\n\ngeometry files,\n\n\nand trajectory files.\n\n\n\n\nGeometry\n\n\ntodo\n\n\nInifile\n\n\ntodo\n\n\nTrajectory\n\n\ntodo", 
            "title": "File formats"
        }, 
        {
            "location": "/user_guide/data_formats/#file-formats", 
            "text": "JuPedSim uses three different files:   inifiles,   geometry files,  and trajectory files.", 
            "title": "File formats"
        }, 
        {
            "location": "/user_guide/data_formats/#geometry", 
            "text": "todo", 
            "title": "Geometry"
        }, 
        {
            "location": "/user_guide/data_formats/#inifile", 
            "text": "todo", 
            "title": "Inifile"
        }, 
        {
            "location": "/user_guide/data_formats/#trajectory", 
            "text": "todo", 
            "title": "Trajectory"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/", 
            "text": "Code Style\n\n\nIn JuPedSim we try to code according to the \nStroustrup\n style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really \nneed\n to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.\n\n\nThe code is formated using the automatic formatter \nastyle\n  with the option \n--style=stroustrup\n:\n\n\n\n\nStroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces. \n\n\n\n\nHere is an \nexample:\n\n\nint Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}\n\n\n\n\nTabs vs Spaces\n\n\nThis can be a long and religious discussion, to make it short \nDO NOT\n use tabs, just spaces please.\n\n\nHere are some hints to configure your editor in order to use the \nstroustrup\n style\n\n\n\n\nEmacs\n:\n    Add this to your \n.emacs\n\n\n\n\n(setq c-default-style \nstroustrup\n c-basic-offset 5)\n(setq indent-tabs-mode nil)\n\n\n\n\n\n\nVim\n:\n    Set in your config file these variables\n\n\n\n\n:set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5\n\n\n\n\n\n\nEclipse\n:\n    Here is a \nplugin\n for astyle in eclipse.\n    Read also\n    \nHow to change indentation width in eclipse?\n\n\n\n\nComments\n\n\nComments and commit messages have to be written in \nEnglish\n. Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#code-style", 
            "text": "In JuPedSim we try to code according to the  Stroustrup  style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really  need  to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.  The code is formated using the automatic formatter  astyle   with the option  --style=stroustrup :   Stroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces.    Here is an  example:  int Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#tabs-vs-spaces", 
            "text": "This can be a long and religious discussion, to make it short  DO NOT  use tabs, just spaces please.  Here are some hints to configure your editor in order to use the  stroustrup  style   Emacs :\n    Add this to your  .emacs   (setq c-default-style  stroustrup  c-basic-offset 5)\n(setq indent-tabs-mode nil)   Vim :\n    Set in your config file these variables   :set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5   Eclipse :\n    Here is a  plugin  for astyle in eclipse.\n    Read also\n     How to change indentation width in eclipse?", 
            "title": "Tabs vs Spaces"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#comments", 
            "text": "Comments and commit messages have to be written in  English . Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Comments"
        }, 
        {
            "location": "/contributing/workflow/", 
            "text": "Workflow\n\n\nThis is a git-specific workflow that helps you contribute flawlessly you JuPedSim.\n\n\n\n\nClone the project (for the first time)\n\n\n\n\n    git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git\n\n\n\n\n\n\nChange to the developement branch and create a branch with your feature.\n\n\n\n\n    git checkout developement \n    git checkout -b feature_name\n\n\n\n\n\n\nWrite code and Commit changes\n\n\n\n\n    git commit -m \nDescribe here your changes\n\n\n\n\n\n\n\nPush your branch to GitLab. But before doing so, \ntest\n your code.\n\n\n\n\n    git push origin feature_name\n\n\n\n\n\n\n\n\nCreate a merge request\n\n\na \nMaster\n will review your code \n merge it to the developement branch (maybe).\n\n\n\n\n\n\nTips Working with Git\n\n\n\n\nPull frequently.\n\n\nCommit often, but don\u2019t push every commit.\n\n\nCreate one commit per unit of work. Break your changes down into multiple commits, e.g. \nfix bug\n, \nadd documentation\n, etc.\n\n\nPush when changes are tested.\n\n\n\n\nSee also \n8 Tips to help you work better with Git\n.\n\n\nKeywords for closing issues\n\n\nThe following keywords will close an issue via commit message:\n\n\n\n\nclose\n\n\ncloses\n\n\nclosed\n\n\nfix\n\n\nfixes\n\n\nfixed\n\n\n\n\nThe closing-pattern\n is as follows:\n\n\n((?:[Cc]los(?:e[sd]?|ing)|[Ff]ix(?:e[sd]|ing)?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?))+)\n\n\n\n\n\n\nTop Tip\n: Your code is maybe fine if you see on the repository\ns front page this symbol\n\n\n\nbefore your commit.", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#workflow", 
            "text": "This is a git-specific workflow that helps you contribute flawlessly you JuPedSim.   Clone the project (for the first time)       git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git   Change to the developement branch and create a branch with your feature.       git checkout developement \n    git checkout -b feature_name   Write code and Commit changes       git commit -m  Describe here your changes    Push your branch to GitLab. But before doing so,  test  your code.       git push origin feature_name    Create a merge request  a  Master  will review your code   merge it to the developement branch (maybe).", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#tips-working-with-git", 
            "text": "Pull frequently.  Commit often, but don\u2019t push every commit.  Create one commit per unit of work. Break your changes down into multiple commits, e.g.  fix bug ,  add documentation , etc.  Push when changes are tested.   See also  8 Tips to help you work better with Git .", 
            "title": "Tips Working with Git"
        }, 
        {
            "location": "/contributing/workflow/#keywords-for-closing-issues", 
            "text": "The following keywords will close an issue via commit message:   close  closes  closed  fix  fixes  fixed   The closing-pattern  is as follows:  ((?:[Cc]los(?:e[sd]?|ing)|[Ff]ix(?:e[sd]|ing)?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?))+)   Top Tip : Your code is maybe fine if you see on the repository s front page this symbol  \nbefore your commit.", 
            "title": "Keywords for closing issues"
        }, 
        {
            "location": "/contributing/utest/", 
            "text": "Unit testing, verification and validation tests\n\n\nTesting should be enabled by cmake as follows:\n\n\ncmake -DBUILD_TESTING=ON ..\n\n\n\n\nAfter compiling (\nmake\n) the tests can be called as follows:\n\n\nctest\n\n\n\n\nThis will take some hours time (depending on your machine). Threfore, a quick testing could be used:\n\n\nctest -R Boost\n\n\n\n\nwhich run a limited set of tests on the code.\n\n\nWriting a unit test\n\n\nIf you write a unit test the first lines in your file should be\n\n\n#define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include \nboost/test/unit_test.hpp\n\n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)\n\n\n\n\nThen you can start implementing your test cases by using\n\n\nBOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }\n\n\n\n\nFor each method or function you want to test you should write a new test case and give it a speaking name.\n\n\nVerification and validation\n\n\nBesides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for \nJuPedSim\n (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.\n\n\nTo write additional tests, create a directory under \nUtest/\n.\n\n\n\n\nCreate in \n./jpscore/Utest/\n a new direct with a descriptive name. For\n   example: \n/Utest/test_case1/\n\n\nPut in that directory an ini-file (referred to as \nmaster-inifile\n)\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax\n\n\n\n\nExample:\n\n\n   \nmax_sim_time\n[3,4]\n/max_sim_time\n \n   \nseed\nrange(1, 10)\n/seed\n\n\n\n\n\n\n\nrun the script \nmakeini.py\n with the obligatory option \n-f\n: Using the\n    aforementioned example the call is:\n\n\n\n\n   python makeini.py -f test_case1/inifile.xml\n\n\n\n\nThe Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory \ninifiles\n.\n\n\n\n\nWrite a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.\n\n\n\n\nYour script has to start with the following lines:\n\n\n#!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *\n\n\n\n\nAfter including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.\n\n\ndef runtest(inifile, trajfile):\n\n\n\n\nYou can also use more than these arguments like this:\n\n\ndef runtest(inifile, trajfile, x, y, z):\n\n\n\n\nIf you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like\n\n\nif condition_fails: \n  exit(FAILURE)\n\n\n\n\nOnce you have written your test you have to make your script executable, so it has to contain a main function which calls the test:\n\n\nif __name__ == \n__main__\n:\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info(\n%s exits with SUCCESS\n % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Unit testing"
        }, 
        {
            "location": "/contributing/utest/#unit-testing-verification-and-validation-tests", 
            "text": "Testing should be enabled by cmake as follows:  cmake -DBUILD_TESTING=ON ..  After compiling ( make ) the tests can be called as follows:  ctest  This will take some hours time (depending on your machine). Threfore, a quick testing could be used:  ctest -R Boost  which run a limited set of tests on the code.", 
            "title": "Unit testing, verification and validation tests"
        }, 
        {
            "location": "/contributing/utest/#writing-a-unit-test", 
            "text": "If you write a unit test the first lines in your file should be  #define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include  boost/test/unit_test.hpp \n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)  Then you can start implementing your test cases by using  BOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }  For each method or function you want to test you should write a new test case and give it a speaking name.", 
            "title": "Writing a unit test"
        }, 
        {
            "location": "/contributing/utest/#verification-and-validation", 
            "text": "Besides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for  JuPedSim  (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.  To write additional tests, create a directory under  Utest/ .   Create in  ./jpscore/Utest/  a new direct with a descriptive name. For\n   example:  /Utest/test_case1/  Put in that directory an ini-file (referred to as  master-inifile )\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax   Example:      max_sim_time [3,4] /max_sim_time  \n    seed range(1, 10) /seed    run the script  makeini.py  with the obligatory option  -f : Using the\n    aforementioned example the call is:      python makeini.py -f test_case1/inifile.xml  The Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory  inifiles .   Write a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.   Your script has to start with the following lines:  #!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *  After including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.  def runtest(inifile, trajfile):  You can also use more than these arguments like this:  def runtest(inifile, trajfile, x, y, z):  If you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like  if condition_fails: \n  exit(FAILURE)  Once you have written your test you have to make your script executable, so it has to contain a main function which calls the test:  if __name__ ==  __main__ :\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info( %s exits with SUCCESS  % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Verification and validation"
        }, 
        {
            "location": "/models/operativ/", 
            "text": "Operational models\n\n\nSeveral operational models are implemented in \njpscore\n. An operational model defines how pedestrians moves from one time step to the next.\nIn the definition of agent\ns properties it is mandatory to precise the number of the model to be used e.g.:\n\n\nagents operational_model_id=\nn\n\n\n\n\n\nwhere \nn\n is a positive number in [1, 4].\n\n\nGeneral model parameters (for all models)\n\n\nThe definition of any model parameter is composed of two different \nsections: \n\n\n\n\nmodel_parameters\n: Model specific parameter. See below in the different model sections.\n\n\nagent_parameters\n: These parameter are mainly specific for the shape of pedestrians \n    or other properties like desired speed, reaction time etc.\n\n\n\n\nModel_parameters\n\n\n\n\nsolver\neuler\n/solver\n\n\nThe solver for the ODE. Only \nEuler\n. No other options.\n\n\n\n\n\n\nstepsize\n0.05\n/stepsize\n: \n\n\nThe time step for the solver. This should be choosed with care. For force-based model it is recommended to take a value between \n10^{-2}\n and \n10^{-3}\n s.\n   Since this model is basically a first-order ODE, a value of 0.05 s should be OK.\n   A larger time step leads to faster simulations, however it is too risky and can lead to collisions and overlapping among pedestrians.\n\n\nUnit: s \n\n\n\n\n\n\n\n\nperiodic\n0\n/periodic\n\n\n\n\nSet to 1 if a system with closed boundary conditions should be simulated. Default setting is 0.\n\n\nThis option is only implemented in \nTordeux2015\n and is very geometry-specific (only for corridors) with predefined settings. See Utest/Validation/1test_1D/ for a use case.\n\n\n\n\n\n\n\n\nexit_crossing_strategy\n3\n/exit_crossing_strategy\n\n\n\n\nPositive values in [1, 6]. See \nDirection strategies\n.\n\n\n\n\n\n\n\n\nlinkedcells enabled=\"true\" cell_size=\"2\"/\n\n\n\n\nDefines the size of the linked-cell grid. This is important to get the neighbors of a pedestrians.\n\n\nUnit: m\n\n\n\n\n\n\n\n\nAgent_parameters\n\n\nThe \nagent parameters\n are mostly identical for all models. Exceptions will be mentioned explicitly. \n\n\nThe parameters that can be specified in this section are (default value are given). All parameter are Gauss distributed.\n\n\nDesired speed\n\n\n\n\nv0 mu=\"1.2\" sigma=\"0.0\" /\n \n\n\nDesired speed\n\n\nUnit: m/s\n\n\n\n\n\n\nv0_upstairs mu=\"0.6\" sigma=\"0.167\" /\n\n\nDesired speed upstairs\n\n\nUnit: m/s\n\n\n\n\n\n\nv0_downstairs mu=\"0.6\" sigma=\"0.188\" /\n\n\nDesired speed downstairs\n\n\nUnit: m/s\n\n\n\n\n\n\nv0_idle_escalator_upstairs mu=\"0.6\" sigma=\"0.0\" /\n\n\nSpeed of idle escalators upstairs\n\n\nUnit: m/s\n\n\n\n\n\n\nv0_idle_escalator_downstairs mu=\"0.6\" sigma=\"0.0\" /\n\n\nSpeed of idle escalators downstairs\n\n\nUnit: m/s\n\n\n\n\n\n\n\n\nShape of pedestrians\n\n\nPedestrians are modeled as ellipses with two semi-axes: \na\n and \nb\n, where\n\n\na= a_{min} + a_{\\tau}v, \n\n\nand\n\n\nb = b_{max} - (b_{max}-b_{min})\\frac{v}{v^0}.\n\n\n\n\n\n\n\nbmax mu=\"0.15\" sigma=\"0.0\" /\n\n\nMaximal length of the shoulder semi-axis\n\n\nUnit: m\n\n\n\n\n\n\nbmin mu=\"0.15\" sigma=\"0.0\" /\n\n\nMinimal length of the shoulder semi-axis\n\n\nUnit: m\n\n\n\n\n\n\namin mu=\"0.15\" sigma=\"0.0\" /\n\n\nMinimal length of the movement semi-axis. This is the case when \nv=0\n.\n\n\nUnit: m \n\n\n\n\n\n\natau mu=\"0.\" sigma=\"0.0\" /\n\n\n(Linear) speed-dependency of the movement semi-axis\n\n\nUnit: s\n\n\n\n\n\n\ntau mu=\"0.5\" sigma=\"0.0\" /\n\n\nReaction time. This constant is used in the driving force of the force-based forces. Small \n\\rightarrow\n instantaneous acceleration.\n\n\nUnit: s\n\n\n\n\n\n\nT mu=\"1\" sigma=\"0.0\" /\n\n\nSpecific parameter for model 3 (Tordeux2015). Defines the slope of the speed function. \n\n\n\n\n\n\n\n\nGeneralized Centrifugal Force Model\n\n\nA force-based model.\n\n\nUsage:\n\n\nmodel operational_model_id=\n1\n description=\ngcfm\n\n\n\n\n\nGompertz Model\n\n\nA force-based model.\n\n\nUsage:\n\n\nmodel operational_model_id=\n2\n description=\ngompertz\n\n\n\n\n\nCollision-free speed model\n\n\nA velocity-based model. See also this \ntalk\n for more details about the mode.\n\n\nUsage:\n\n\nmodel operational_model_id=\n3\n description=\nTordeux2015\n\n\n\n\n\nModel parameters\n\n\nBesides the options defined in \nMode_parameters\n the following options are necessary for this model.\n\n\n\n\nforce_ped  a=\"5\" D=\"0.2\"/\n\n\nThe influence of other pedestrians is triggered by \na\n and \nD\n where \na\n is the strength if the interaction and \nD\n gives its range. The naming may be misleading, since the model is \nnot\n force-based, but velocity-based. \n\n\nUnit: m\n\n\n\n\n\n\nforce_wall a=\"5\" D=\"0.02\"/\n: \n\n\nThe influence of  walls is triggered by \na\n and \nD\n where \na\n is the strength if the interaction and \nD\n gives its range. A larger value of \nD\n may lead to blockades, especially when passing narrow bottlenecks.\n\n\nUnit: m\n\n\n\n\n\n\n\n\nAgent parameters (recommendations)\n\n\nThis models has no support for ellipses, therefore the parameter for the semi-axes \nAgent_parameters\n should be chosen, such that circles with constant radius are obtained.\nFor example: \n\n\nbmax mu=\n0.15\n sigma=\n0.0\n /\n\n\nbmin mu=\n0.15\n sigma=\n0.0\n /\n\n\namin mu=\n0.15\n sigma=\n0.0\n /\n\n\natau mu=\n0.\n sigma=\n0.0\n /\n\n\n\n\n\nThis defines circles with radius 15 cm.\n\n\nIn summary the relevant section for this model could look like:\n\n\nmodel operational_model_id=\n3\n description=\nTordeux2015\n\n    \nmodel_parameters\n\n        \nsolver\neuler\n/solver\n\n        \nstepsize\n0.05\n/stepsize\n\n        \nexit_crossing_strategy\n3\n/exit_crossing_strategy\n\n        \nlinkedcells enabled=\ntrue\n cell_size=\n2\n/\n\n        \nforce_ped  a=\n5\n D=\n0.2\n/\n\n        \nforce_wall a=\n5\n D=\n0.02\n/\n\n    \n/model_parameters\n\n    \nagent_parameters agent_parameter_id=\n1\n\n        \nv0 mu=\n1.34\n sigma=\n0.0\n /\n\n        \nv0_upstairs mu=\n0.668\n sigma=\n0.167\n /\n\n        \nv0_downstairs mu=\n0.750\n sigma=\n0.188\n /\n\n        \nv0_idle_escalator_upstairs mu=\n0.5\n sigma=\n0.0\n /\n\n        \nv0_idle_escalator_downstairs mu=\n0.5\n sigma=\n0.0\n /\n\n        \nbmax mu=\n0.15\n sigma=\n0.0\n /\n\n        \nbmin mu=\n0.15\n sigma=\n0.0\n /\n\n        \namin mu=\n0.15\n sigma=\n0.0\n /\n\n        \natau mu=\n0.\n sigma=\n0.0\n /\n\n        \ntau mu=\n0.5\n sigma=\n0.0\n /\n\n        \nT mu=\n1\n sigma=\n0.0\n /\n\n    \n/agent_parameters\n\n\n/model\n\n\n\n\n\nWall-avoidance model\n\n\nA velocity-based model\n\n\nUsage:\n\n\nmodel operational_model_id=\n4\n description=\ngradnav", 
            "title": "Operational models"
        }, 
        {
            "location": "/models/operativ/#operational-models", 
            "text": "Several operational models are implemented in  jpscore . An operational model defines how pedestrians moves from one time step to the next.\nIn the definition of agent s properties it is mandatory to precise the number of the model to be used e.g.:  agents operational_model_id= n   where  n  is a positive number in [1, 4].", 
            "title": "Operational models"
        }, 
        {
            "location": "/models/operativ/#general-model-parameters-for-all-models", 
            "text": "The definition of any model parameter is composed of two different \nsections:    model_parameters : Model specific parameter. See below in the different model sections.  agent_parameters : These parameter are mainly specific for the shape of pedestrians \n    or other properties like desired speed, reaction time etc.", 
            "title": "General model parameters (for all models)"
        }, 
        {
            "location": "/models/operativ/#model_parameters", 
            "text": "solver euler /solver  The solver for the ODE. Only  Euler . No other options.    stepsize 0.05 /stepsize :   The time step for the solver. This should be choosed with care. For force-based model it is recommended to take a value between  10^{-2}  and  10^{-3}  s.\n   Since this model is basically a first-order ODE, a value of 0.05 s should be OK.\n   A larger time step leads to faster simulations, however it is too risky and can lead to collisions and overlapping among pedestrians.  Unit: s      periodic 0 /periodic   Set to 1 if a system with closed boundary conditions should be simulated. Default setting is 0.  This option is only implemented in  Tordeux2015  and is very geometry-specific (only for corridors) with predefined settings. See Utest/Validation/1test_1D/ for a use case.     exit_crossing_strategy 3 /exit_crossing_strategy   Positive values in [1, 6]. See  Direction strategies .     linkedcells enabled=\"true\" cell_size=\"2\"/   Defines the size of the linked-cell grid. This is important to get the neighbors of a pedestrians.  Unit: m", 
            "title": "Model_parameters"
        }, 
        {
            "location": "/models/operativ/#agent_parameters", 
            "text": "The  agent parameters  are mostly identical for all models. Exceptions will be mentioned explicitly.   The parameters that can be specified in this section are (default value are given). All parameter are Gauss distributed.", 
            "title": "Agent_parameters"
        }, 
        {
            "location": "/models/operativ/#desired-speed", 
            "text": "v0 mu=\"1.2\" sigma=\"0.0\" /    Desired speed  Unit: m/s    v0_upstairs mu=\"0.6\" sigma=\"0.167\" /  Desired speed upstairs  Unit: m/s    v0_downstairs mu=\"0.6\" sigma=\"0.188\" /  Desired speed downstairs  Unit: m/s    v0_idle_escalator_upstairs mu=\"0.6\" sigma=\"0.0\" /  Speed of idle escalators upstairs  Unit: m/s    v0_idle_escalator_downstairs mu=\"0.6\" sigma=\"0.0\" /  Speed of idle escalators downstairs  Unit: m/s", 
            "title": "Desired speed"
        }, 
        {
            "location": "/models/operativ/#shape-of-pedestrians", 
            "text": "Pedestrians are modeled as ellipses with two semi-axes:  a  and  b , where \na= a_{min} + a_{\\tau}v,  \nand \nb = b_{max} - (b_{max}-b_{min})\\frac{v}{v^0}.    bmax mu=\"0.15\" sigma=\"0.0\" /  Maximal length of the shoulder semi-axis  Unit: m    bmin mu=\"0.15\" sigma=\"0.0\" /  Minimal length of the shoulder semi-axis  Unit: m    amin mu=\"0.15\" sigma=\"0.0\" /  Minimal length of the movement semi-axis. This is the case when  v=0 .  Unit: m     atau mu=\"0.\" sigma=\"0.0\" /  (Linear) speed-dependency of the movement semi-axis  Unit: s    tau mu=\"0.5\" sigma=\"0.0\" /  Reaction time. This constant is used in the driving force of the force-based forces. Small  \\rightarrow  instantaneous acceleration.  Unit: s    T mu=\"1\" sigma=\"0.0\" /  Specific parameter for model 3 (Tordeux2015). Defines the slope of the speed function.", 
            "title": "Shape of pedestrians"
        }, 
        {
            "location": "/models/operativ/#generalized-centrifugal-force-model", 
            "text": "A force-based model.  Usage:  model operational_model_id= 1  description= gcfm", 
            "title": "Generalized Centrifugal Force Model"
        }, 
        {
            "location": "/models/operativ/#gompertz-model", 
            "text": "A force-based model.  Usage:  model operational_model_id= 2  description= gompertz", 
            "title": "Gompertz Model"
        }, 
        {
            "location": "/models/operativ/#collision-free-speed-model", 
            "text": "A velocity-based model. See also this  talk  for more details about the mode.  Usage:  model operational_model_id= 3  description= Tordeux2015", 
            "title": "Collision-free speed model"
        }, 
        {
            "location": "/models/operativ/#model-parameters", 
            "text": "Besides the options defined in  Mode_parameters  the following options are necessary for this model.   force_ped  a=\"5\" D=\"0.2\"/  The influence of other pedestrians is triggered by  a  and  D  where  a  is the strength if the interaction and  D  gives its range. The naming may be misleading, since the model is  not  force-based, but velocity-based.   Unit: m    force_wall a=\"5\" D=\"0.02\"/ :   The influence of  walls is triggered by  a  and  D  where  a  is the strength if the interaction and  D  gives its range. A larger value of  D  may lead to blockades, especially when passing narrow bottlenecks.  Unit: m", 
            "title": "Model parameters"
        }, 
        {
            "location": "/models/operativ/#agent-parameters-recommendations", 
            "text": "This models has no support for ellipses, therefore the parameter for the semi-axes  Agent_parameters  should be chosen, such that circles with constant radius are obtained.\nFor example:   bmax mu= 0.15  sigma= 0.0  /  bmin mu= 0.15  sigma= 0.0  /  amin mu= 0.15  sigma= 0.0  /  atau mu= 0.  sigma= 0.0  /   This defines circles with radius 15 cm.  In summary the relevant section for this model could look like:  model operational_model_id= 3  description= Tordeux2015 \n     model_parameters \n         solver euler /solver \n         stepsize 0.05 /stepsize \n         exit_crossing_strategy 3 /exit_crossing_strategy \n         linkedcells enabled= true  cell_size= 2 / \n         force_ped  a= 5  D= 0.2 / \n         force_wall a= 5  D= 0.02 / \n     /model_parameters \n     agent_parameters agent_parameter_id= 1 \n         v0 mu= 1.34  sigma= 0.0  / \n         v0_upstairs mu= 0.668  sigma= 0.167  / \n         v0_downstairs mu= 0.750  sigma= 0.188  / \n         v0_idle_escalator_upstairs mu= 0.5  sigma= 0.0  / \n         v0_idle_escalator_downstairs mu= 0.5  sigma= 0.0  / \n         bmax mu= 0.15  sigma= 0.0  / \n         bmin mu= 0.15  sigma= 0.0  / \n         amin mu= 0.15  sigma= 0.0  / \n         atau mu= 0.  sigma= 0.0  / \n         tau mu= 0.5  sigma= 0.0  / \n         T mu= 1  sigma= 0.0  / \n     /agent_parameters  /model", 
            "title": "Agent parameters (recommendations)"
        }, 
        {
            "location": "/models/operativ/#wall-avoidance-model", 
            "text": "A velocity-based model  Usage:  model operational_model_id= 4  description= gradnav", 
            "title": "Wall-avoidance model"
        }, 
        {
            "location": "/models/direction/", 
            "text": "Direction strategies\n\n\nThe desired direction of a pedestrian is defined following different algorithms:\nIn the section of the chosen model the direction strategy should be specified as follows:\n\n\nexit_crossing_strategy\nnum\n/exit_crossing_strategy\n\n\n\n\n\nwith \nnum\n a positive integer.\n\n\nThe majority of the strategies define how a pedestrian crosses a line \nL = [P_1, P_2]\n. Possible values are:  \n\n\n\n\nThe direction of the pedestrian is towards the middle of \nL\n (\n\\frac{P_1+P2}{2}\n)  \n\n\nThe direction is given by the nearest point on \nL\n to the position of the pedestrian.  \n\n\nSame as 2, only the line \nL\n is shorten by 20 cm.  \n\n\nIf the nearest point of the pedestrian on the segment line \nL\n is outside the segment, then chose the middle point as target.\n\n   Otherwise the nearest point is chosen.\n\n\nThis strategy is still beta. It assumes that the simulation scenario has no loops or U-shaped corridors.\n   Pedestrians, are targets towards the exit, even if it is outside their visibility range. In case of intersection with walls or bstacles, the temporary direction is rotaions away from the wall.  \n\n\nThis strategy does use a floor field rather than heading towards a point on a line segment. For more details see \nGraf2015\n.\n\n\n\n\nMost of the aforementioned strategies were discussed in \nChraibi2011\n.", 
            "title": "Direction strategies"
        }, 
        {
            "location": "/models/direction/#direction-strategies", 
            "text": "The desired direction of a pedestrian is defined following different algorithms:\nIn the section of the chosen model the direction strategy should be specified as follows:  exit_crossing_strategy num /exit_crossing_strategy   with  num  a positive integer.  The majority of the strategies define how a pedestrian crosses a line  L = [P_1, P_2] . Possible values are:     The direction of the pedestrian is towards the middle of  L  ( \\frac{P_1+P2}{2} )    The direction is given by the nearest point on  L  to the position of the pedestrian.    Same as 2, only the line  L  is shorten by 20 cm.    If the nearest point of the pedestrian on the segment line  L  is outside the segment, then chose the middle point as target. \n   Otherwise the nearest point is chosen.  This strategy is still beta. It assumes that the simulation scenario has no loops or U-shaped corridors.\n   Pedestrians, are targets towards the exit, even if it is outside their visibility range. In case of intersection with walls or bstacles, the temporary direction is rotaions away from the wall.    This strategy does use a floor field rather than heading towards a point on a line segment. For more details see  Graf2015 .   Most of the aforementioned strategies were discussed in  Chraibi2011 .", 
            "title": "Direction strategies"
        }, 
        {
            "location": "/models/routing/", 
            "text": "Routing\n\n\nDifferent router are implemented. However: \n\n\nActually the router-class is undergoing a a major refactoring...\n\n\n\n\nGlobal shortest path\n\n\nAt the beginning of the simulation, the Dijkstra algorithm is used to\nbuild a network which is then cached and used through the simulation\nlife time.\n\n\nQuickest path\n\n\nIn the quickest path, the peds are rerouted based on actual traffic\nconditions. This defaults to the global shortest path when the patience\ntime of the agents are very large.\n\n\nDetailed information about the aforementioned models\nare presented in: \nKemlohWagoum2012a\n\n\nFollowing snippet is a definition example of the routing information:\n\n\nroute_choice_models\n\n  \nrouter router_id=\n1\n description=\nquickest\n\n    \nparameters\n\n      \nnavigation_mesh method=\ntriangulation\n use_for_local_planning=\ntrue\n /\n\n    \n/parameters\n\n  \n/router\n\n\n  \nrouter router_id=\n2\n description=\nglobal_shortest\n\n    \nparameters\n\n      \nnavigation_lines file=\nrouting.xml\n /\n\n    \n/parameters\n\n  \n/router\n\n\n/route_choice_models\n\n\n\n\n\nThe cognitive map\n\n\nSee this \ntalk\n to get the idea\n\n\nrouter router_id=\n7\n description=\ncognitive_map\n\n  \nsensors\n\n      \nsensor sensor_id=\n1\n description=\nRoom2Corridor\n/\n\n      \nsensor sensor_id=\n2\n description=\nSmoke\n p_field_path=\nD:\\JuPedSim\\jpscore\\inputfiles\\cognitive_map\\pFields\\\n update_time=\n30\n final_time=\n300\n/\n\n  \n/sensors\n\n  \ncognitive_map status=\ncomplete\n /\n\n\n/router", 
            "title": "Routing"
        }, 
        {
            "location": "/models/routing/#routing", 
            "text": "Different router are implemented. However:   Actually the router-class is undergoing a a major refactoring...", 
            "title": "Routing"
        }, 
        {
            "location": "/models/routing/#global-shortest-path", 
            "text": "At the beginning of the simulation, the Dijkstra algorithm is used to\nbuild a network which is then cached and used through the simulation\nlife time.", 
            "title": "Global shortest path"
        }, 
        {
            "location": "/models/routing/#quickest-path", 
            "text": "In the quickest path, the peds are rerouted based on actual traffic\nconditions. This defaults to the global shortest path when the patience\ntime of the agents are very large.  Detailed information about the aforementioned models\nare presented in:  KemlohWagoum2012a  Following snippet is a definition example of the routing information:  route_choice_models \n   router router_id= 1  description= quickest \n     parameters \n       navigation_mesh method= triangulation  use_for_local_planning= true  / \n     /parameters \n   /router \n\n   router router_id= 2  description= global_shortest \n     parameters \n       navigation_lines file= routing.xml  / \n     /parameters \n   /router  /route_choice_models", 
            "title": "Quickest path"
        }, 
        {
            "location": "/models/routing/#the-cognitive-map", 
            "text": "See this  talk  to get the idea  router router_id= 7  description= cognitive_map \n   sensors \n       sensor sensor_id= 1  description= Room2Corridor / \n       sensor sensor_id= 2  description= Smoke  p_field_path= D:\\JuPedSim\\jpscore\\inputfiles\\cognitive_map\\pFields\\  update_time= 30  final_time= 300 / \n   /sensors \n   cognitive_map status= complete  /  /router", 
            "title": "The cognitive map"
        }, 
        {
            "location": "/tests/introduction/", 
            "text": "Introduction\n\n\nIn order to develop, use and reuse mathematical models for pedestrian dynamics with high fidelity level,\nthe verification and validation process should be considered as key part in the development cycle of every model.\n\n\nSince JuPedSim is being developed intensively and is constantly extended with new models, it is important to test its functionality continuously.\nFor this purpose, we developed a bunch of quality tests that are triggered after each change in the code.\nBesides, we use known tests e.g. RiMEA tests and NIST tests.\n\n\nThe \nRiMEA\n project aims to develop and define a set of tests to ensure the quality of pedestrian dynamics software.\n\n\n\n\n\nAll tests are run in an automatic way. See also \nContributing/Unit testing\n.\n\n\nList of used tests\n\n\nWe give a  list of the tests we use in JuPedSim along with a brief description as well as specific remarks related to implementation:\n\n\n\n\n\n\nRiMEA tests\n \n\n\n\n\n\n\nJuelich tests", 
            "title": "Introduction"
        }, 
        {
            "location": "/tests/introduction/#introduction", 
            "text": "In order to develop, use and reuse mathematical models for pedestrian dynamics with high fidelity level,\nthe verification and validation process should be considered as key part in the development cycle of every model.  Since JuPedSim is being developed intensively and is constantly extended with new models, it is important to test its functionality continuously.\nFor this purpose, we developed a bunch of quality tests that are triggered after each change in the code.\nBesides, we use known tests e.g. RiMEA tests and NIST tests.  The  RiMEA  project aims to develop and define a set of tests to ensure the quality of pedestrian dynamics software.   All tests are run in an automatic way. See also  Contributing/Unit testing .", 
            "title": "Introduction"
        }, 
        {
            "location": "/tests/introduction/#list-of-used-tests", 
            "text": "We give a  list of the tests we use in JuPedSim along with a brief description as well as specific remarks related to implementation:    RiMEA tests      Juelich tests", 
            "title": "List of used tests"
        }, 
        {
            "location": "/tests/rimea/", 
            "text": "RiMEA tests\n\n\nAll these tests are described in more details in this \narticle\n.\nThe notes give hints about specific implementation in JuPedSim.\n\n\n\n\n\n\n\n\nTest 1\n: One pedestrian is moving along a corridor.\n\n\nTest if pedestrian can maintain its speed constant\n\n\n\n\n\n\nTest 2\n: One pedestrian moving on a 10m long stair.\n\n\nIt should be shown that the pedestrian can maintain its speed constant.\n\n\n\n\n\n\nTest 3\n: One pedestrian moving on a 10m long stair \ndownstairs\n.\n\n\nIt should be shown that the pedestrian can maintain its speed constant.\n\n\n\n\n\n\nTest 4\n: Show that the model can produce the shape of the fundamental diagram (density-velocity relation)\n    in a simplified one-dimentional corridor with closed boundary conditions.\n\n\n\n\n\n\nTest 5\n: Distribute 10 pedestrians with 10 different reaction times.\n\n\nVerify whether they start exactly at the specified times.\n\n\n\n\n\n\nTest 6\n: 20 pedestrians going around a corner.\n\n\nPedestrians should not cross walls.\n\n\n\n\n\n\nTest 7\n: Distribute pedestrian\ns speed according to the Table in Page 6. Four different groups are distributed according to their velocity:\n\n\n\n\n\n\nv<30\n\n\n\n\n\n\n30<v<50\n\n\n\n\n\n\nv>50\n\n\n\n\nhandicapped.\n\n\n\n\nVerify whether the speed values are within the specified range.\n\n\n\n\n\n\nTest 8\n: A 3D building is simulated and the influence of parameter e.g. speed\n    is investigated.\n\n\nIt should be shown how the evacuation time behaves with respect\nto the investigated parameter. \n1\n\n\n\n\n\n\nTest 9\n: 1000 pedestrians are distributed in a room with 4 exits.\n\n\n\n\nscenario 1: All 4 exits are open\n\n\nscenario 2: 2 exits are closed. The remaining 2 are still open\n\n\n\n\nThe flow should nearly be doubled in scenario 1. \n2\n\n\n\n\n\n\nTest 10\n: Pedestrians are distributed in 12 different rooms. The building has two exits.\n\n\nThe Pedestrians have exactly assigned exit numbers and should evacuate through these. \n3\n\n\n\n\n\n\nTest 11\n: 300 pedestrians are distributed in a room with two exits.\n\n\nThe pedestrians should prefer the nearest exit, but some should (spontaneously) choose the second exit.\n\n\n\n\n\n\nTest 12\n: Two bottlenecks are connected with a long corridor.\n\n\nAt the last exit there should be no jam. \n4\n\n\n\n\n\n\nTest 13\n: Pedestrian coming out from a bottleneck along a corridor. At the end of the corridor is a stair.\n\n\nSince pedestrians have to reduce their speed on the stair, a jam should be observed at the beginning of the stair.\n\n\nIn case of jam, flow at the beginning of the stair should be smaller than the flow in the corridor.\n5\n \n\n\n\n\n\n\nTest 14\n: Pedestrian\ns evacuation to an exit. Pedestrians have two possible routes:\n\n\n\n\nshort\n\n\nand long\n\n\n\n\nThis test has no concrete condition to check for.\nIt should be documented whether pedestrians take a long detour or not\nThere are 4 stats that should be documented:\n\n\n\n\nkurz\n (\nshort\n)\n\n\nlang\n  (\nlong\n)\n\n\ngemischt\n (\nmixed\n)\n\n\nkonfigurierbar\n (\nconfigurable\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandbook\n\n\nSpeed Stair Up\n\n\n\n\n\n\n\n\n\n\nPM\n\n\n0.63 m/s\n\n\n\n\n\n\nWM\n\n\n0.61 m/s\n\n\n\n\n\n\nNM\n\n\n0.8 m/s\n\n\n\n\n\n\nFM\n\n\n0.55 m/s\n\n\n\n\n\n\n\n\nTherefore, we choose for \nv^0_{upstairs}\n a Gauss-distribution with \n\\mu = 0.675\n and \n\\sigma = 0.04\n.\n\n\n\n\n\n\n\n\n\n\nThis is not a fail criterion. It is just for documentation purposes.\n\n\n\n\n\n\nFor simplicity in JuPedSim we simulate two identical rooms:\n\n      - room left: with 4 exits. All of them are open\n\n      - room right with 4 exits. two of them are closed\n\n      - We write the trajectory in plain txt-format, to avoid a long lasting xml-parsing\n\n\n\n\n\n\nPedestrian are assigned  to two different groups. We verify if pedestrians in the two groups pass the exits.\nIn the simulation pedestrians disappear once they are outside therefore we check if a pedestrian goes through line  \nexit - displacement\n.\n\n\n\n\n\n\nThe condition of this test is not clear enough\n\nIn the last exit there should be no jam, which means \nJ_{bottleneck} >= J_{last}.\n\nHowever, this condition is not enough to quantify a jam.\n\n\n\n\n\n\nThe reduced speed on stairs (up) is according to Tab 1 in \nBurghardt2014\n.", 
            "title": "RiMEA"
        }, 
        {
            "location": "/tests/rimea/#rimea-tests", 
            "text": "All these tests are described in more details in this  article .\nThe notes give hints about specific implementation in JuPedSim.     Test 1 : One pedestrian is moving along a corridor.  Test if pedestrian can maintain its speed constant    Test 2 : One pedestrian moving on a 10m long stair.  It should be shown that the pedestrian can maintain its speed constant.    Test 3 : One pedestrian moving on a 10m long stair  downstairs .  It should be shown that the pedestrian can maintain its speed constant.    Test 4 : Show that the model can produce the shape of the fundamental diagram (density-velocity relation)\n    in a simplified one-dimentional corridor with closed boundary conditions.    Test 5 : Distribute 10 pedestrians with 10 different reaction times.  Verify whether they start exactly at the specified times.    Test 6 : 20 pedestrians going around a corner.  Pedestrians should not cross walls.    Test 7 : Distribute pedestrian s speed according to the Table in Page 6. Four different groups are distributed according to their velocity:    v<30    30<v<50    v>50   handicapped.   Verify whether the speed values are within the specified range.    Test 8 : A 3D building is simulated and the influence of parameter e.g. speed\n    is investigated.  It should be shown how the evacuation time behaves with respect\nto the investigated parameter.  1    Test 9 : 1000 pedestrians are distributed in a room with 4 exits.   scenario 1: All 4 exits are open  scenario 2: 2 exits are closed. The remaining 2 are still open   The flow should nearly be doubled in scenario 1.  2    Test 10 : Pedestrians are distributed in 12 different rooms. The building has two exits.  The Pedestrians have exactly assigned exit numbers and should evacuate through these.  3    Test 11 : 300 pedestrians are distributed in a room with two exits.  The pedestrians should prefer the nearest exit, but some should (spontaneously) choose the second exit.    Test 12 : Two bottlenecks are connected with a long corridor.  At the last exit there should be no jam.  4    Test 13 : Pedestrian coming out from a bottleneck along a corridor. At the end of the corridor is a stair.  Since pedestrians have to reduce their speed on the stair, a jam should be observed at the beginning of the stair.  In case of jam, flow at the beginning of the stair should be smaller than the flow in the corridor. 5      Test 14 : Pedestrian s evacuation to an exit. Pedestrians have two possible routes:   short  and long   This test has no concrete condition to check for.\nIt should be documented whether pedestrians take a long detour or not\nThere are 4 stats that should be documented:   kurz  ( short )  lang   ( long )  gemischt  ( mixed )  konfigurierbar  ( configurable )        Handbook  Speed Stair Up      PM  0.63 m/s    WM  0.61 m/s    NM  0.8 m/s    FM  0.55 m/s     Therefore, we choose for  v^0_{upstairs}  a Gauss-distribution with  \\mu = 0.675  and  \\sigma = 0.04 .      This is not a fail criterion. It is just for documentation purposes.    For simplicity in JuPedSim we simulate two identical rooms: \n      - room left: with 4 exits. All of them are open \n      - room right with 4 exits. two of them are closed \n      - We write the trajectory in plain txt-format, to avoid a long lasting xml-parsing    Pedestrian are assigned  to two different groups. We verify if pedestrians in the two groups pass the exits.\nIn the simulation pedestrians disappear once they are outside therefore we check if a pedestrian goes through line   exit - displacement .    The condition of this test is not clear enough \nIn the last exit there should be no jam, which means  J_{bottleneck} >= J_{last}. \nHowever, this condition is not enough to quantify a jam.    The reduced speed on stairs (up) is according to Tab 1 in  Burghardt2014 .", 
            "title": "RiMEA tests"
        }, 
        {
            "location": "/tests/juelich/", 
            "text": "Juelich tests\n\n\nThese tests are largely similar to the \nRiMEA tests\n.\nThey are extendend by \nverification\n tests to verify the validy of some algorithms implemented in JuPedSim and some \nvalidation\n tests based on experimental data.\n\n\n\n\nVerification\n\n\n\n\n\n\nTest 1\n: : Free flow movement in a corridor\n\n\nA pedestrian that starts in the middle of a corridor (i.e. is not influenced by the walls)\nshould move with its free flow velocity towards the  exit. \n\n\n\n\n\n\nTest 2\n: One pedestrian moving in a corridor\n\n\nRotating the same geometry as in test 1 around the \nz-\naxis by an arbitrary angle e.g. \n45^\\circ\n should lead to the evacuation time of 10 s.\n\n\n\n\n\n\nTest 3\n: One pedestrian moving in a corridor with a desired direction\n\n\nA pedestrian is started from a random position in a holding area.\nThis test should be repeated with different initial positions.\n\n\nExpected result: The pedestrians should be able to reach the marked goal in all repetitions of the test.\n\n\n\n\n\n\nTest 4\n: Single pedestrian moving in a corridor with an obstacle\n\n\nTwo pedestrians are aligned in the same room. The second pedestrian from left is standing and will not move during the test.\n\n\nExpected result: Pedestrian left should be able to overtake the standing pedestrian\n\n\n\n\n\n\nTest 5\n: Single pedestrian moving in a very narrow corridor with an obstacle\n\n\nThis test is Similar to test 4. Two pedestrians are aligned in the same room. The second pedestrian from left is standing and will not move during the test. The corridor is narrow and does not allow passing of two pedestians without serious overlapping.\n\n\nExpected result: Pedestrian left should stop without overlapping with the standing pedestrian.\n\n\n\n\n\n\nTest 6\n: single pedestrian moving in a corridor with more that one target\n\n\nA pedestrian is moving in a corridor with several intermediate goals.\n\n\nExpected result: The pedestrian should move through the different targets without a substantial change in its velocity i.e. with a desired speed of 1 m/s the distance of 10 m should be covered in 10 s.\n\n\n\n\n\n\nTest 7\n: route choice with different exits\n\n\nIn this section the correct behavior of the implemented routing algorithms as well as the correct router-assignment are tested. The investigated geometry has three different exists.\n\n\n\n\nTwo different groups of pedestrians are randomly distributed in the inner room, such that the first group is nearer to \n\\rm{E_1}\n than to  \n\\rm{E_2}\n. The number of pedestrians in both groups is relatively small but is equal (\nN_{\\rm{group 1}}=N_{\\rm{group 2}}=10\n). The router strategy is \nlocal shortest\n.\n\n\nOne group of pedestrians (\nN = 50\n) is randomly distributed in the inner room. The router strategy is \nlocal shortest\n.\n\n\nOne group of pedestrians (\nN = 50\n is randomly distributed in the inner room. The router strategy is \nglobal shortest\n.\n\n\n\n\nExpected result: The pedestrians should be able to choose between the local shortest as well as the global shortest route.\n\n\n\n\n\n\nTest 8\n: visibility and obstacle\n    The position of one pedestrian is initialized such that it has no direct view to the exit.\n\n\nExpected result: The pedestrian should avoid the obstacle and exit the room without overlapping with the obstacle.\n\n\n\n\n\n\nTest 9\n: runtime optimization using parallelism\n\n\nImplementations that make use of parallel paradigms e.g. OpenMP are tested  as follows:\n\n\n\n\nDistribute randomly 100 pedestrians in the gray area.\n\n\nMeasure the flow through the bottleneck of the evacuation time i.e. the time necessary for the last pedestrian to leave the system.\n\n\nRepeat points 1 and 2 several times to get a certain statistical significance of the results.\n\n\n\n\nExpected results:\n- The simulation results (flow, evacuation time, \n) should be invariant with respect to the number of cores used.\n- The run time should scale with the number of cores.\n\n\n\n\n\n\nTest 10\n: runtime optimization using Verlet neighbor lists or cell-linked list method\n\n\nThis test maybe specific for force-based models. In order to reduce the complexity of calculating interactions among \nN\n pedestrians from \n\\mathcal{O}(N^2)\n, several techniques can be used to keep track of the neighbors.\n\n\nThe edge length of one cell is bigger than the cut-off radius of the interaction force.\n\n\n\n\nExpected results:\nThe simulation results (flow, \n) should be the same, for the same initial conditions, with cell size bigger than the cut-off radius of the force-based model used.\nThe simulation should fail for a cell size smaller than the cut-off radius of the forces.\nThe simulation time should scale with the cell size.\n\n\n\n\n\n\n\n\nTest 11\n: Test the room/subroom construct \n1\n\n\nThe same geometry is constructed differently\nThe whole geometry is designed as a \nrooms\n (i.e. utility space)\nThe geometry is designed by dividing the utility space in connected \nsubrooms\n\n\nDistribute randomly pedestrians in all sub-rooms of the geometry and repeat the simulation to get a certain statistical significance.\n\n\nExpected results:\nThe mean value of the evacuation times calculated from both cases should not differ.\n\n\n\n\n\n\nTest 12\n: Obstructed visibility\n\n\nFour pedestrians being simulated in a bottleneck. Pedestrians 0 and 1 have zero desired speed i.e. they will not move during the simulation whereas pedestrians 2 and 3 are heading towards the exit.\n\n\nThe visibility between pedestrians 2 resp. 3 and 0 resp. 2 is obstructed by a wall resp. an obstacle.\n\n\nExpected results: Pedestrians 2 and 3 should not deviate from the horizontal dashed line.\n\n\n\n\n\n\nTest 13\n: Uniform distribution of initial positions\n\n\nThe initial distribution of the pedestrian should be uniform. In a square room (\n100\\times 100\\,\n\n\nm^2\n) 2000 pedestrians are randomly distributed. The test is repeated 1000 times.\nDivide the room equidistantly in 10 regions with respect to \nx\n- and \ny-\n axis and count the number of pedestrians in each square.\nThis count should be roughly the same in all squares:\n\n\n\n\n\n\nimport numpy as np\nimport scipy, scipy.stats\nimport matplotlib.pyplot as plt\n\nfilename = \n./path/to/file.txt\n\ndata = np.loadtxt(filename)\n\nx = data[:,2]\ny = data[:,3]\n\nnx = plt.hist(x, bins=10)[0]\nny = plt.hist(y, bins=10)[0]\n\npx = scipy.stats.chisquare(nx)[1]\npy = scipy.stats.chisquare(ny)[1]\n\n\n\n\nExpected result: The mean value of the 1000 p-values of the \n\\chi^2\n-test should be around 0.5.\n\n\n\n\n\n\nTest 15\n: Runtime of the code\n    The purpose of this test is to make sure that the code is not getting slower! The test scenario is set up such that\n    the \nevacuation times is larger that the execution time\n. This test is ideally run in form of a nightly build.\n\n\nExpected result: \nt_{\\rm{evac}}\\ge t_{\\rm{exec}}\n.\n\n\n\n\n\n\nValidation\n\n\n\n\n\n\nTest 1\n: 1D movement with periodical boundary\n\n\nThe shape of the fundamental diagram (\n\\rho, v\n) should be realistic (decreasing velocity with increasing density).\n\n\n\n\n\n\nTest 2\n: 2D unidirectional flow in corridor with periodical boundary\n\n\nThe shape of the fundamental diagram (\n\\rho, v\n) should be realistic (decreasing velocity with increasing density).\n\n\n\n\n\n\nTest 3\n: Unidirectional flow in corridor with open boundary\n\n\nThe shape of the fundamental diagram (\n\\rho, v\n) should be realistic (decreasing velocity with increasing density).\n\n\n\n\n\n\nTest 4\n: Unidirectional flow around a Corner\n\n\nThe fundamental diagram is measured in two different locations. Before the corner and after the corner.\nThe shape of the fundamental diagram (\n\\rho, v\n) should be realistic (decreasing velocity with increasing density).\n\n\n\n\n\n\nTest 5\n: Flow through bottleneck\n\n\nThe flow  \nJ = N / \\Delta t\n, with \nN\n is the total number of participants in the run and \n\\Delta t\n is the time interval between the first and the last pedestrian entering the bottleneck, should increase linearly with increasing width of the bottleneck.\n\n\n\n\n\n\nTest 6\n: Merging flow in T-junction\n\n\nThe fundamental diagram is measured in three different locations.\nRight and left of the T-junction and after the merging of flows.\n\n\nThe shape of the fundamental diagram (\n\\rho, v\n) should be realistic (decreasing velocity with increasing density).\n\n\n\n\n\n\nTest 7\n - Bidirectional flow in corridor\n\n\nThe shape of the fundamental diagram (\n\\rho, v\n) should be realistic (decreasing velocity with increasing density).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis test should be removed after refactoring the geometry-class. There will be not \nsubroom\n anymore.", 
            "title": "Juelich"
        }, 
        {
            "location": "/tests/juelich/#juelich-tests", 
            "text": "These tests are largely similar to the  RiMEA tests .\nThey are extendend by  verification  tests to verify the validy of some algorithms implemented in JuPedSim and some  validation  tests based on experimental data.", 
            "title": "Juelich tests"
        }, 
        {
            "location": "/tests/juelich/#verification", 
            "text": "Test 1 : : Free flow movement in a corridor  A pedestrian that starts in the middle of a corridor (i.e. is not influenced by the walls)\nshould move with its free flow velocity towards the  exit.     Test 2 : One pedestrian moving in a corridor  Rotating the same geometry as in test 1 around the  z- axis by an arbitrary angle e.g.  45^\\circ  should lead to the evacuation time of 10 s.    Test 3 : One pedestrian moving in a corridor with a desired direction  A pedestrian is started from a random position in a holding area.\nThis test should be repeated with different initial positions.  Expected result: The pedestrians should be able to reach the marked goal in all repetitions of the test.    Test 4 : Single pedestrian moving in a corridor with an obstacle  Two pedestrians are aligned in the same room. The second pedestrian from left is standing and will not move during the test.  Expected result: Pedestrian left should be able to overtake the standing pedestrian    Test 5 : Single pedestrian moving in a very narrow corridor with an obstacle  This test is Similar to test 4. Two pedestrians are aligned in the same room. The second pedestrian from left is standing and will not move during the test. The corridor is narrow and does not allow passing of two pedestians without serious overlapping.  Expected result: Pedestrian left should stop without overlapping with the standing pedestrian.    Test 6 : single pedestrian moving in a corridor with more that one target  A pedestrian is moving in a corridor with several intermediate goals.  Expected result: The pedestrian should move through the different targets without a substantial change in its velocity i.e. with a desired speed of 1 m/s the distance of 10 m should be covered in 10 s.    Test 7 : route choice with different exits  In this section the correct behavior of the implemented routing algorithms as well as the correct router-assignment are tested. The investigated geometry has three different exists.   Two different groups of pedestrians are randomly distributed in the inner room, such that the first group is nearer to  \\rm{E_1}  than to   \\rm{E_2} . The number of pedestrians in both groups is relatively small but is equal ( N_{\\rm{group 1}}=N_{\\rm{group 2}}=10 ). The router strategy is  local shortest .  One group of pedestrians ( N = 50 ) is randomly distributed in the inner room. The router strategy is  local shortest .  One group of pedestrians ( N = 50  is randomly distributed in the inner room. The router strategy is  global shortest .   Expected result: The pedestrians should be able to choose between the local shortest as well as the global shortest route.    Test 8 : visibility and obstacle\n    The position of one pedestrian is initialized such that it has no direct view to the exit.  Expected result: The pedestrian should avoid the obstacle and exit the room without overlapping with the obstacle.    Test 9 : runtime optimization using parallelism  Implementations that make use of parallel paradigms e.g. OpenMP are tested  as follows:   Distribute randomly 100 pedestrians in the gray area.  Measure the flow through the bottleneck of the evacuation time i.e. the time necessary for the last pedestrian to leave the system.  Repeat points 1 and 2 several times to get a certain statistical significance of the results.   Expected results:\n- The simulation results (flow, evacuation time,  ) should be invariant with respect to the number of cores used.\n- The run time should scale with the number of cores.    Test 10 : runtime optimization using Verlet neighbor lists or cell-linked list method  This test maybe specific for force-based models. In order to reduce the complexity of calculating interactions among  N  pedestrians from  \\mathcal{O}(N^2) , several techniques can be used to keep track of the neighbors. \nThe edge length of one cell is bigger than the cut-off radius of the interaction force.   Expected results:\nThe simulation results (flow,  ) should be the same, for the same initial conditions, with cell size bigger than the cut-off radius of the force-based model used.\nThe simulation should fail for a cell size smaller than the cut-off radius of the forces.\nThe simulation time should scale with the cell size.     Test 11 : Test the room/subroom construct  1  The same geometry is constructed differently\nThe whole geometry is designed as a  rooms  (i.e. utility space)\nThe geometry is designed by dividing the utility space in connected  subrooms  Distribute randomly pedestrians in all sub-rooms of the geometry and repeat the simulation to get a certain statistical significance.  Expected results:\nThe mean value of the evacuation times calculated from both cases should not differ.    Test 12 : Obstructed visibility  Four pedestrians being simulated in a bottleneck. Pedestrians 0 and 1 have zero desired speed i.e. they will not move during the simulation whereas pedestrians 2 and 3 are heading towards the exit.  The visibility between pedestrians 2 resp. 3 and 0 resp. 2 is obstructed by a wall resp. an obstacle.  Expected results: Pedestrians 2 and 3 should not deviate from the horizontal dashed line.    Test 13 : Uniform distribution of initial positions  The initial distribution of the pedestrian should be uniform. In a square room ( 100\\times 100\\,  m^2 ) 2000 pedestrians are randomly distributed. The test is repeated 1000 times.\nDivide the room equidistantly in 10 regions with respect to  x - and  y-  axis and count the number of pedestrians in each square.\nThis count should be roughly the same in all squares:    import numpy as np\nimport scipy, scipy.stats\nimport matplotlib.pyplot as plt\n\nfilename =  ./path/to/file.txt \ndata = np.loadtxt(filename)\n\nx = data[:,2]\ny = data[:,3]\n\nnx = plt.hist(x, bins=10)[0]\nny = plt.hist(y, bins=10)[0]\n\npx = scipy.stats.chisquare(nx)[1]\npy = scipy.stats.chisquare(ny)[1]  Expected result: The mean value of the 1000 p-values of the  \\chi^2 -test should be around 0.5.    Test 15 : Runtime of the code\n    The purpose of this test is to make sure that the code is not getting slower! The test scenario is set up such that\n    the  evacuation times is larger that the execution time . This test is ideally run in form of a nightly build.  Expected result:  t_{\\rm{evac}}\\ge t_{\\rm{exec}} .", 
            "title": "Verification"
        }, 
        {
            "location": "/tests/juelich/#validation", 
            "text": "Test 1 : 1D movement with periodical boundary  The shape of the fundamental diagram ( \\rho, v ) should be realistic (decreasing velocity with increasing density).    Test 2 : 2D unidirectional flow in corridor with periodical boundary  The shape of the fundamental diagram ( \\rho, v ) should be realistic (decreasing velocity with increasing density).    Test 3 : Unidirectional flow in corridor with open boundary  The shape of the fundamental diagram ( \\rho, v ) should be realistic (decreasing velocity with increasing density).    Test 4 : Unidirectional flow around a Corner  The fundamental diagram is measured in two different locations. Before the corner and after the corner.\nThe shape of the fundamental diagram ( \\rho, v ) should be realistic (decreasing velocity with increasing density).    Test 5 : Flow through bottleneck  The flow   J = N / \\Delta t , with  N  is the total number of participants in the run and  \\Delta t  is the time interval between the first and the last pedestrian entering the bottleneck, should increase linearly with increasing width of the bottleneck.    Test 6 : Merging flow in T-junction  The fundamental diagram is measured in three different locations.\nRight and left of the T-junction and after the merging of flows.  The shape of the fundamental diagram ( \\rho, v ) should be realistic (decreasing velocity with increasing density).    Test 7  - Bidirectional flow in corridor  The shape of the fundamental diagram ( \\rho, v ) should be realistic (decreasing velocity with increasing density).        This test should be removed after refactoring the geometry-class. There will be not  subroom  anymore.", 
            "title": "Validation"
        }, 
        {
            "location": "/about/disclaimer/", 
            "text": "Disclaimer\n\n\nIn no event shall JuPedSim be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if\nJuPedSim has been advised of the possibility of such damage.\n\n\nJuPedSim specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided \nas is\n. JuPedSim has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.\n\n\nForschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of JuPedSim, and accepts no responsibility for its use. Users\nof JuPedSim assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.\n\n\nUsers are warned that JuPedSim is intended for \nacademic\n use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/disclaimer/#disclaimer", 
            "text": "In no event shall JuPedSim be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if\nJuPedSim has been advised of the possibility of such damage.  JuPedSim specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided  as is . JuPedSim has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.  Forschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of JuPedSim, and accepts no responsibility for its use. Users\nof JuPedSim assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.  Users are warned that JuPedSim is intended for  academic  use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/LICENSE/", 
            "text": "License\n\n\n\n\n\nJuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.\n\n\nJuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see \nGNU licenses\n.", 
            "title": "License"
        }, 
        {
            "location": "/about/LICENSE/#license", 
            "text": "JuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.  JuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.  You should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see  GNU licenses .", 
            "title": "License"
        }, 
        {
            "location": "/about/contributors/", 
            "text": "Contributors\n\n\nin alphabetical order:\n\n\n\n\nAndrea, Portz\n\n\nArne, Graf\n\n\nBenjamin, Schr\u00f6der\n\n\nDavid, Haensel\n\n\nDenis, Shikhalev\n\n\nErik, Andresen\n\n\nJun, Zhang\n\n\nMohcine, Chraibi\n\n\nOliver, Schmidts\n\n\nUlrich, Kemloh\n\n\nWeichen, Liao", 
            "title": "Contributors"
        }, 
        {
            "location": "/about/contributors/#contributors", 
            "text": "in alphabetical order:   Andrea, Portz  Arne, Graf  Benjamin, Schr\u00f6der  David, Haensel  Denis, Shikhalev  Erik, Andresen  Jun, Zhang  Mohcine, Chraibi  Oliver, Schmidts  Ulrich, Kemloh  Weichen, Liao", 
            "title": "Contributors"
        }, 
        {
            "location": "/publications/", 
            "text": "Publications\n\n\nJuPedSim is a software build for academic use only.\nThe models implemented within this framework were developed in different\ntheses and articles that were published in journals or presented in conferences.\n\n\nThis is a list of some works that contributed to JuPedSim or used it to\nproduce results.\n\n\nTheses\n\n\n\n\n\n\nGraf, Arne\n\n    Automated Routing in Pedestrian Dynamics\n\n    Master thesis, Fachhochschule Aachen, 2015\n\n\nTalk\n\n\n\n\n\n\nHaensel, David\n\n    \u201cA Knowledge-Based Routing Framework for Pedestrian Dynamics Simulation.\u201d\n\n    Diploma thesis, Technische Universitaet Dresden, 2014.\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich.\n\n\n\u201cRoute Choice Modelling and Runtime Optimisation for Simulation of Building Evacuation,\u201d\n\n    PhD Wuppertal university (2013).\n\n\n\n\n\n\nZhang, Jun\n\n\nPedestrian fundamental diagrams: Comparative analysis of experiments in different geometries\n\n    PhD Wuppertal University (2012).\n\n\n\n\n\n\nChraibi, Mohcine\n\n\nValidated force-based modeling of pedestrian dynamics\n\n    PhD Cologne University (2012).\n\n\n\n\n\n\nPeer-reviewed journal articles\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich, Steffen, Bernhard, Seyfried, Armin,  and Chraibi, Mohcine.\n\n\n\u201cParallel Real Time Computation of Large Scale Pedestrian Evacuations.\u201d\n\n    Advances in Engineering Software 60\u201361 (2013): 98\u2013103.\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich, Seyfried, Armin and Holl, Stefan.\n\n\n\u201cModeling the Dynamic Route Choice of Pedestrians to Assess the Criticality of Building Evacuation.\u201d\n\n    Advances in Complex Systems 15, no. 3 (2012). doi:DOI: 10.1142/S0219525912500294.\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich, Chraibi, Mohcine, Mehlich, Jonas,  Seyfried, Armin  and Schadschneider, Andreas. \n\n\nEfficient and Validated Simulation of Crowds for an Evacuation Assistant.\n\n    Computer Animation and Virtual Worlds 23, no. 1 (2012): 3\u201315. doi:10.1002/cav.1420.\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich, Seyfried, Armin, Fiedrich, Frank, and  Majer, Ralph.\n\n\nEmpirical Study and Modelling of Pedestrians\n Route Choice in a Complex Facility.\n\n    In Pedestrian and Evacuation Dynamics 2012, edited by Ulrich Weidmann, Uwe Kirsch, and Michael Schreckenberg, 251\u201365.\n    Springer International Publishing, 2014.\n\n\n\n\n\n\nChraibi, Mohcine,  Kemloh, Ulrich, Seyfried, Armin and Schadschneider, Andreas.\n\n\n\u201cForce-Based Models of Pedestrian Dynamics.\u201d\n\n    Networks and Heterogeneous Media 6, no. 3 (2011): 425\u201342. doi:10.3934/nhm.2011.6.425.\n\n\n\n\n\n\nChraibi, Mohcine, Seyfried, Armin and Schadschneider, Andreas.\n\n\n\u201cGeneralized Centrifugal Force Model for Pedestrian Dynamics.\u201d\n\n    Physical Review E 82 (2010): 046111. doi:10.1103/PhysRevE.82.046111.\n\n\n\n\n\n\nConferences\n\n\n\n\n\n\nTordeux, Antoine, Chraibi, Mohcine and Seyfried, Armin\n\n\nCollision-free speed model for pedestrian dynamics\n\n    In \nTraffic and Granular Flow  \n15\n, to appear.\n\n\n\n\n\n\nAndresen, Erik, Chraibi, Mohcine, Seyfried, Armin\n\n\nWayfinding and cognitive maps for pedestrian models (Talk)\n\n     In \nTraffic and Granular Flow  \n15\n, to appear.\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich, Chraibi, Mohcine, Zhang, Jun and L\u00e4mmel, Gregor.\n\n    \u201cJuPedSim: An Open Framework for Simulating and Analyzing the Dynamics of Pedestrians.\u201d\n\n    In \n3rd Conference of Transportation Research Group of India\n, 2015.\n\n\n\n\n\n\nBoltes, Maik, Chraibi, Mohcine, Holl, Stefan, Kemloh Wagoum, Armel Ulrich, L\u00e4mmel, Gregor, Liao, Weichen, Mehner, Wolfgang, Tordeux, Antoine,  and Zhang, Jun.\n\n    \u201cExperimentation, Data Collection, Modeling and Simulation of Pedestrian Dynamics.\u201d\n\n    In \nStatistics, Probability \n Numerical Analysis 2014\n - Methods \n Applications, 2014.\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich, Steffen, Bernhard and Seyfried, Armin.\n\n    \u201cRuntime Optimisation Approaches for a Real-Time Evacuation Assistant.\u201d\n\n    In \n9th Conference on Parallel Processing and Applied Mathematics\n, edited by R. Wyrzykowski, 7203:386\u201395.\n\n    Lecture Notes in Computer Science. Springer Berlin/Heidelberg, 2012.\n\n\n\n\n\n\nChraibi, Mohcine, Freialdenhoven, Martina, Schadschneider, Andreas and Seyfried, Armin.\n\n\n\u201cModeling the Desired Direction in a Force-Based Model for Pedestrian Dynamics,\u201d\n\n    In \nTraffic and Granular Flow  \n11\n, edited by %E Kozlov, Valery V., Buslaev, Alexander P., Bugaev, Alexander S., Yashina, Marina V., Schadschneider, Andreas and Schreckenberg, Michael\n\n    Springer Berlin Heidelberg, July 5, 2012.\n\n\n\n\n\n\nKemloh Wagoum, Armel Ulrich, and Seyfried, Armin.\n\n    \u201cOptimizing the Evacuation Time of Pedestrians in a Graph-Based Navigation.\u201d\n\n    In \nDevelopments in Road Transportation\n, edited by Mahabir Panda and Ujjal Chattararaj, 188\u201396. Macmillian Publishers India Ltd, 2010.", 
            "title": "Publications"
        }, 
        {
            "location": "/publications/#publications", 
            "text": "JuPedSim is a software build for academic use only.\nThe models implemented within this framework were developed in different\ntheses and articles that were published in journals or presented in conferences.  This is a list of some works that contributed to JuPedSim or used it to\nproduce results.", 
            "title": "Publications"
        }, 
        {
            "location": "/publications/#theses", 
            "text": "Graf, Arne \n    Automated Routing in Pedestrian Dynamics \n    Master thesis, Fachhochschule Aachen, 2015  Talk    Haensel, David \n    \u201cA Knowledge-Based Routing Framework for Pedestrian Dynamics Simulation.\u201d \n    Diploma thesis, Technische Universitaet Dresden, 2014.    Kemloh Wagoum, Armel Ulrich.  \u201cRoute Choice Modelling and Runtime Optimisation for Simulation of Building Evacuation,\u201d \n    PhD Wuppertal university (2013).    Zhang, Jun  Pedestrian fundamental diagrams: Comparative analysis of experiments in different geometries \n    PhD Wuppertal University (2012).    Chraibi, Mohcine  Validated force-based modeling of pedestrian dynamics \n    PhD Cologne University (2012).", 
            "title": "Theses"
        }, 
        {
            "location": "/publications/#peer-reviewed-journal-articles", 
            "text": "Kemloh Wagoum, Armel Ulrich, Steffen, Bernhard, Seyfried, Armin,  and Chraibi, Mohcine.  \u201cParallel Real Time Computation of Large Scale Pedestrian Evacuations.\u201d \n    Advances in Engineering Software 60\u201361 (2013): 98\u2013103.    Kemloh Wagoum, Armel Ulrich, Seyfried, Armin and Holl, Stefan.  \u201cModeling the Dynamic Route Choice of Pedestrians to Assess the Criticality of Building Evacuation.\u201d \n    Advances in Complex Systems 15, no. 3 (2012). doi:DOI: 10.1142/S0219525912500294.    Kemloh Wagoum, Armel Ulrich, Chraibi, Mohcine, Mehlich, Jonas,  Seyfried, Armin  and Schadschneider, Andreas.   Efficient and Validated Simulation of Crowds for an Evacuation Assistant. \n    Computer Animation and Virtual Worlds 23, no. 1 (2012): 3\u201315. doi:10.1002/cav.1420.    Kemloh Wagoum, Armel Ulrich, Seyfried, Armin, Fiedrich, Frank, and  Majer, Ralph.  Empirical Study and Modelling of Pedestrians  Route Choice in a Complex Facility. \n    In Pedestrian and Evacuation Dynamics 2012, edited by Ulrich Weidmann, Uwe Kirsch, and Michael Schreckenberg, 251\u201365.\n    Springer International Publishing, 2014.    Chraibi, Mohcine,  Kemloh, Ulrich, Seyfried, Armin and Schadschneider, Andreas.  \u201cForce-Based Models of Pedestrian Dynamics.\u201d \n    Networks and Heterogeneous Media 6, no. 3 (2011): 425\u201342. doi:10.3934/nhm.2011.6.425.    Chraibi, Mohcine, Seyfried, Armin and Schadschneider, Andreas.  \u201cGeneralized Centrifugal Force Model for Pedestrian Dynamics.\u201d \n    Physical Review E 82 (2010): 046111. doi:10.1103/PhysRevE.82.046111.", 
            "title": "Peer-reviewed journal articles"
        }, 
        {
            "location": "/publications/#conferences", 
            "text": "Tordeux, Antoine, Chraibi, Mohcine and Seyfried, Armin  Collision-free speed model for pedestrian dynamics \n    In  Traffic and Granular Flow   15 , to appear.    Andresen, Erik, Chraibi, Mohcine, Seyfried, Armin  Wayfinding and cognitive maps for pedestrian models (Talk) \n     In  Traffic and Granular Flow   15 , to appear.    Kemloh Wagoum, Armel Ulrich, Chraibi, Mohcine, Zhang, Jun and L\u00e4mmel, Gregor. \n    \u201cJuPedSim: An Open Framework for Simulating and Analyzing the Dynamics of Pedestrians.\u201d \n    In  3rd Conference of Transportation Research Group of India , 2015.    Boltes, Maik, Chraibi, Mohcine, Holl, Stefan, Kemloh Wagoum, Armel Ulrich, L\u00e4mmel, Gregor, Liao, Weichen, Mehner, Wolfgang, Tordeux, Antoine,  and Zhang, Jun. \n    \u201cExperimentation, Data Collection, Modeling and Simulation of Pedestrian Dynamics.\u201d \n    In  Statistics, Probability   Numerical Analysis 2014  - Methods   Applications, 2014.    Kemloh Wagoum, Armel Ulrich, Steffen, Bernhard and Seyfried, Armin. \n    \u201cRuntime Optimisation Approaches for a Real-Time Evacuation Assistant.\u201d \n    In  9th Conference on Parallel Processing and Applied Mathematics , edited by R. Wyrzykowski, 7203:386\u201395. \n    Lecture Notes in Computer Science. Springer Berlin/Heidelberg, 2012.    Chraibi, Mohcine, Freialdenhoven, Martina, Schadschneider, Andreas and Seyfried, Armin.  \u201cModeling the Desired Direction in a Force-Based Model for Pedestrian Dynamics,\u201d \n    In  Traffic and Granular Flow   11 , edited by %E Kozlov, Valery V., Buslaev, Alexander P., Bugaev, Alexander S., Yashina, Marina V., Schadschneider, Andreas and Schreckenberg, Michael \n    Springer Berlin Heidelberg, July 5, 2012.    Kemloh Wagoum, Armel Ulrich, and Seyfried, Armin. \n    \u201cOptimizing the Evacuation Time of Pedestrians in a Graph-Based Navigation.\u201d \n    In  Developments in Road Transportation , edited by Mahabir Panda and Ujjal Chattararaj, 188\u201396. Macmillian Publishers India Ltd, 2010.", 
            "title": "Conferences"
        }, 
        {
            "location": "/doxygen/", 
            "text": "Code documentation\n\n\nDoxygen code documentation\n, used for in-depth code documentation overview.", 
            "title": "API"
        }, 
        {
            "location": "/doxygen/#code-documentation", 
            "text": "Doxygen code documentation , used for in-depth code documentation overview.", 
            "title": "Code documentation"
        }
    ]
}