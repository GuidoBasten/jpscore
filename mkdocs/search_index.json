{
    "docs": [
        {
            "location": "/", 
            "text": "JPScore\n\n\nCore module for simulation and computing of trajectories.\n\n\n\n\n\n\n\n\n\nNote\n: When reporting bugs, please make sure to use the development branch v0.8.\n\n\n\n\nJuPedSim comes with four loosely coupled modules: \n\n\n\n\nJPScore: The simulation core\n\n\nJPSvis\n: Geometry and trajectories visualization tool\n\n\nJPSreport\n: Implementation of different measurement methods to evaluate out of trajectories the density, the velocity and the flow.\n\n\nJPSreditor\n: Geometry editor.\n\n\n\n\nUsage\n\n\njpscore\n is called  with initialization files (inifiles):\n\n\n jpscore config.xml\n\n\n\n\nwith \nconfig.xml\n a structured \nxml\n project file containing parameter definitions, agents distributions and other \nimportant configurations to run a simulation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEverybody is welcome to contribute to the project, but first have a look at", 
            "title": "Home"
        }, 
        {
            "location": "/#jpscore", 
            "text": "Core module for simulation and computing of trajectories.     Note : When reporting bugs, please make sure to use the development branch v0.8.   JuPedSim comes with four loosely coupled modules:    JPScore: The simulation core  JPSvis : Geometry and trajectories visualization tool  JPSreport : Implementation of different measurement methods to evaluate out of trajectories the density, the velocity and the flow.  JPSreditor : Geometry editor.", 
            "title": "JPScore"
        }, 
        {
            "location": "/#usage", 
            "text": "jpscore  is called  with initialization files (inifiles):   jpscore config.xml  with  config.xml  a structured  xml  project file containing parameter definitions, agents distributions and other \nimportant configurations to run a simulation.               Everybody is welcome to contribute to the project, but first have a look at", 
            "title": "Usage"
        }, 
        {
            "location": "/user_guide/requirements/", 
            "text": "Requirements\n\n\n\n\nCMake\n\n\nA compiler with support for C++11 e.g. \ng++\n or \nclang\n or \nVisual Studio 2013\n\n\nfor \nJPSvis\n and \nJPSeditor\n additionally \nQt\n and \nVTK\n are needed.\n\n\nJPSreport\n and \nJPScore\n need \nBoost-libraries\n. At the moment boost is hard-linked in \nJPSreport\n, but this should be fixed in the future.\n\n\n\n\nJuPedSim offers a Vagrant image that comes with all the necessary\npackages and libraries. See for more information \nhere\n.", 
            "title": "Requirements"
        }, 
        {
            "location": "/user_guide/requirements/#requirements", 
            "text": "CMake  A compiler with support for C++11 e.g.  g++  or  clang  or  Visual Studio 2013  for  JPSvis  and  JPSeditor  additionally  Qt  and  VTK  are needed.  JPSreport  and  JPScore  need  Boost-libraries . At the moment boost is hard-linked in  JPSreport , but this should be fixed in the future.   JuPedSim offers a Vagrant image that comes with all the necessary\npackages and libraries. See for more information  here .", 
            "title": "Requirements"
        }, 
        {
            "location": "/user_guide/configuration/", 
            "text": "Installation\n\n\nJuPedSim-modules can not be installed but compiled.\n\n\nFor all  modules the compilation is fairly straightforward: \n\n\n\n\nCreate a new directory and change to it\n\n\n\n\nmkdir build \n cd build\n\n\n\n\n\n\nRun \nCMake\n to build the project\n\n\n\n\ncmake .. \n\n\n\n\ncmake\n will check if all required  libraries are installed. \n- Compile the project\nIf the previous step terminated successfully run \n\n\nmake -jN\n\n\n\n\n(\nN\n is the number of your CPUs)\n\n\n\n\nRun a simulation\nIf the compilation succeeded a binary will be produced in\nthe direction \nbin\n. Run a simulation using one of\nthe ini files in the directory \ninitfiles\n\n\n\n\nFor example:\n\n\n./bin/jpscore inputfiles/Bottleneck/1.1_ini-Bottleneck.xml\n\n\n\n\nUsing an IDE\n\n\n\n\n\n\nCLion\n (Windows, Linux, Mac)\n\n\nCLion\n has build in \nCMake\n-support so you only have to start a new project an set the project root to your \njpscore\n directory.\n\n\n\n\n\n\nEclipse\n (Windows, Linux, Mac)\n\n\nBuild an \nEclipse Project\n with \nCMake\n or the \nCMake-gui\n and open it with \nEclipse\n.\n\n\n\n\n\n\nVisual Studio 2013\n (v0.6+, Windows) \n\n\nRun the \nCMake-gui\n with the generator \nVisual Studio 12 (2013)\n and click on the \n*.sln\n file to open it in Visual Studio.\n\n\nThen click on \nbuild-\nbuild solution\n.\nThis should build your code.\n\n\nCurrent issues are known with the python test cases. Most of them are Unix specific.\nHowever the compilation of \njpscore\n works fine. \n\n\n\n\n\n\nXCode (v0.6+ Mac)\n\n\nRun the \nCMake-gui\n and generate an \nXCode\n-Project then open it with \nXCode\n.\n\n\nOn Mac the standard compiler is clang/clang++.\nIf the project compiles out of your console via cmake/make that does not mean it also compiles out of \nXCode\n.\n\nXCode\n forces some more strict rules while compiling.\n\n\nFor instance, there was one error we could not explain:\n\nXCode\n seems not to know that \nstd::unordered_map.embrace(...)\n is a valid function call\nand returns with an error message.\n\n\nHowever this is an \nXCode\n-specific problem. It does not occur if you are using e.g. \nCLion\n.\n\n\nEven if you compile out of console with the same compiler this throws no error. \n\n\nYou can avoid this by using the function \nstd::unordered_map.insert(std::make_pair(...))\n instead.", 
            "title": "Configuration"
        }, 
        {
            "location": "/user_guide/configuration/#installation", 
            "text": "JuPedSim-modules can not be installed but compiled.  For all  modules the compilation is fairly straightforward:    Create a new directory and change to it   mkdir build   cd build   Run  CMake  to build the project   cmake ..   cmake  will check if all required  libraries are installed. \n- Compile the project\nIf the previous step terminated successfully run   make -jN  ( N  is the number of your CPUs)   Run a simulation\nIf the compilation succeeded a binary will be produced in\nthe direction  bin . Run a simulation using one of\nthe ini files in the directory  initfiles   For example:  ./bin/jpscore inputfiles/Bottleneck/1.1_ini-Bottleneck.xml", 
            "title": "Installation"
        }, 
        {
            "location": "/user_guide/configuration/#using-an-ide", 
            "text": "CLion  (Windows, Linux, Mac)  CLion  has build in  CMake -support so you only have to start a new project an set the project root to your  jpscore  directory.    Eclipse  (Windows, Linux, Mac)  Build an  Eclipse Project  with  CMake  or the  CMake-gui  and open it with  Eclipse .    Visual Studio 2013  (v0.6+, Windows)   Run the  CMake-gui  with the generator  Visual Studio 12 (2013)  and click on the  *.sln  file to open it in Visual Studio.  Then click on  build- build solution .\nThis should build your code.  Current issues are known with the python test cases. Most of them are Unix specific.\nHowever the compilation of  jpscore  works fine.     XCode (v0.6+ Mac)  Run the  CMake-gui  and generate an  XCode -Project then open it with  XCode .  On Mac the standard compiler is clang/clang++.\nIf the project compiles out of your console via cmake/make that does not mean it also compiles out of  XCode . XCode  forces some more strict rules while compiling.  For instance, there was one error we could not explain: XCode  seems not to know that  std::unordered_map.embrace(...)  is a valid function call\nand returns with an error message.  However this is an  XCode -specific problem. It does not occur if you are using e.g.  CLion .  Even if you compile out of console with the same compiler this throws no error.   You can avoid this by using the function  std::unordered_map.insert(std::make_pair(...))  instead.", 
            "title": "Using an IDE"
        }, 
        {
            "location": "/user_guide/vagrant/", 
            "text": "Preconfigured virtual environment\n\n\nIn order to compile a \nJuPedSim\n package, one needs to install some required \npackages and libraries\n, e.g. \nboost\n or even a compiler (\ng++\n) or \ncmake\n.\n\n\nHere, \nVagrant\n can work some magic and help isolating dependencies and their configuration within a single disposable, consistent environment. \n\n\nTherefore, users, whether they are working on Linux, Mac OS X, or Windows, can compile and run code in the same environment, against the same dependencies, all configured the same way. \n\n\nTo learn more about \nVagrant\n this \npage\n will get you started.\n\n\nVirtualBox\n must be installed on its own prior to using \nVagrant\n.\n\n\nVirtualBox\n can be installed by \ndownloading\n a package or installer for your operating system and using standard procedures to install that package.\n\n\nHow it works?\n\n\nBasically, we will create, configure and distribute an environment where \nJuPedSim\n can be\ncompiled and run without the necessity to pre-install any dependencies.\n\n\nWith \nVagrant\n we can create a \nBox\n that can be used with \nVirtualBox\n or directly by \nVagrant\n. \n\n\nOnce connected to this \nvirtual\n machine, the user can compile, run, edit or even git push the code.\n\n\nDownload and install Vagrant\n\n\nDownload a binary from the official \nwebpage\n.\nThe installation is straightforward. \n\n\nStart out with Vagrant\n\n\nIn the Terminal \n\n\nmkdir vagrant_test \n cd vagrant_test\n\n\n\n\nTo start working\n\n\nvagrant init chraibi/jpscore\n\n\n\n\nThis will download an Ubuntu-image for \nVagrant\n, which contains all packages necessary to work with \njpscore\n. \n\n\nThe original image\ns name is \nubuntu/trusty64\n was modified by installing packages like \ng++\n, \ngit\n, \ncmake\n and \nboost\n.\n\n\nStart Vagrant\n\n\nvagrant up\n\n\n\n\nConnect to the machine\n\n\nvagrant ssh\n\n\n\n\nThis will connect you to your virtual machine. See also the following screen-shot\n\n\n\n\nIf asked to give a password give \nvagrant\n.\n\n\nTesting a box\n\n\nAn alternative use of the \njpscore-vagrant-image\n is to get yourself a \nbox-file\n and open it with \nVagrant\n as follows\n\n\nvagrant box add my-box /path/to/the/new.box\n\nvagrant init my-box\n\nvagrant up\n\n\n\n\nA box for \njpscore\n can be found \nhere\n.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#preconfigured-virtual-environment", 
            "text": "In order to compile a  JuPedSim  package, one needs to install some required  packages and libraries , e.g.  boost  or even a compiler ( g++ ) or  cmake .  Here,  Vagrant  can work some magic and help isolating dependencies and their configuration within a single disposable, consistent environment.   Therefore, users, whether they are working on Linux, Mac OS X, or Windows, can compile and run code in the same environment, against the same dependencies, all configured the same way.   To learn more about  Vagrant  this  page  will get you started.  VirtualBox  must be installed on its own prior to using  Vagrant .  VirtualBox  can be installed by  downloading  a package or installer for your operating system and using standard procedures to install that package.", 
            "title": "Preconfigured virtual environment"
        }, 
        {
            "location": "/user_guide/vagrant/#how-it-works", 
            "text": "Basically, we will create, configure and distribute an environment where  JuPedSim  can be\ncompiled and run without the necessity to pre-install any dependencies.  With  Vagrant  we can create a  Box  that can be used with  VirtualBox  or directly by  Vagrant .   Once connected to this  virtual  machine, the user can compile, run, edit or even git push the code.", 
            "title": "How it works?"
        }, 
        {
            "location": "/user_guide/vagrant/#download-and-install-vagrant", 
            "text": "Download a binary from the official  webpage .\nThe installation is straightforward.", 
            "title": "Download and install Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#start-out-with-vagrant", 
            "text": "In the Terminal   mkdir vagrant_test   cd vagrant_test  To start working  vagrant init chraibi/jpscore  This will download an Ubuntu-image for  Vagrant , which contains all packages necessary to work with  jpscore .   The original image s name is  ubuntu/trusty64  was modified by installing packages like  g++ ,  git ,  cmake  and  boost .", 
            "title": "Start out with Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#start-vagrant", 
            "text": "vagrant up", 
            "title": "Start Vagrant"
        }, 
        {
            "location": "/user_guide/vagrant/#connect-to-the-machine", 
            "text": "vagrant ssh  This will connect you to your virtual machine. See also the following screen-shot   If asked to give a password give  vagrant .", 
            "title": "Connect to the machine"
        }, 
        {
            "location": "/user_guide/vagrant/#testing-a-box", 
            "text": "An alternative use of the  jpscore-vagrant-image  is to get yourself a  box-file  and open it with  Vagrant  as follows  vagrant box add my-box /path/to/the/new.box\n\nvagrant init my-box\n\nvagrant up  A box for  jpscore  can be found  here .", 
            "title": "Testing a box"
        }, 
        {
            "location": "/user_guide/quickstart/", 
            "text": "Get started\n\n\nAfter succesfully \ncompiling\n the code you can just run\n\njpscore\n in a Terminal as follows:\n\n\n./bin/jpscore inifile.xml\n\n\n\n\ninifile.xml\n defines all the needed information to start a simulation with\n\njpscore\n. See  the specifications of the \nfile format\n.\n\n\nAfter a successful simulation an additional xml-file will be created in\nthe same directory as the used inifile. It contains discrete values\nfor the trajectories of the agents.\n\n\nYou can visualize the produced trajectory file with \njpscore\n as follows\n\n\n/path/to/jpsvis  trajectory.xml", 
            "title": "Quickstart"
        }, 
        {
            "location": "/user_guide/quickstart/#get-started", 
            "text": "After succesfully  compiling  the code you can just run jpscore  in a Terminal as follows:  ./bin/jpscore inifile.xml  inifile.xml  defines all the needed information to start a simulation with jpscore . See  the specifications of the  file format .  After a successful simulation an additional xml-file will be created in\nthe same directory as the used inifile. It contains discrete values\nfor the trajectories of the agents.  You can visualize the produced trajectory file with  jpscore  as follows  /path/to/jpsvis  trajectory.xml", 
            "title": "Get started"
        }, 
        {
            "location": "/user_guide/data_formats/", 
            "text": "File formats\n\n\nJuPedSim uses three different files:\n\n\n\n\ninifiles, \n\n\ngeometry files,\n\n\nand trajectory files.\n\n\n\n\nGeometry\n\n\ntodo\n\n\nInifile\n\n\ntodo\n\n\nTrajectory\n\n\ntodo", 
            "title": "File formats"
        }, 
        {
            "location": "/user_guide/data_formats/#file-formats", 
            "text": "JuPedSim uses three different files:   inifiles,   geometry files,  and trajectory files.", 
            "title": "File formats"
        }, 
        {
            "location": "/user_guide/data_formats/#geometry", 
            "text": "todo", 
            "title": "Geometry"
        }, 
        {
            "location": "/user_guide/data_formats/#inifile", 
            "text": "todo", 
            "title": "Inifile"
        }, 
        {
            "location": "/user_guide/data_formats/#trajectory", 
            "text": "todo", 
            "title": "Trajectory"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/", 
            "text": "Code Style\n\n\nIn JuPedSim we try to code according to the \nStroustrup\n style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really \nneed\n to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.\n\n\nThe code is formated using the automatic formatter \nastyle\n  with the option \n--style=stroustrup\n:\n\n\n\n\nStroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces. \n\n\n\n\nHere is an \nexample:\n\n\nint Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}\n\n\n\n\nTabs vs Spaces\n\n\nThis can be a long and religious discussion, to make it short \nDO NOT\n use tabs, just spaces please.\n\n\nHere are some hints to configure your editor in order to use the \nstroustrup\n style\n\n\n\n\nEmacs\n:\n    Add this to your \n.emacs\n\n\n\n\n(setq c-default-style \nstroustrup\n c-basic-offset 5)\n(setq indent-tabs-mode nil)\n\n\n\n\n\n\nVim\n:\n    Set in your config file these variables\n\n\n\n\n:set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5\n\n\n\n\n\n\nEclipse\n:\n    Here is a \nplugin\n for astyle in eclipse.\n    Read also\n    \nHow to change indentation width in eclipse?\n\n\n\n\nComments\n\n\nComments and commit messages have to be written in \nEnglish\n. Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#code-style", 
            "text": "In JuPedSim we try to code according to the  Stroustrup  style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really  need  to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.  The code is formated using the automatic formatter  astyle   with the option  --style=stroustrup :   Stroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces.    Here is an  example:  int Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#tabs-vs-spaces", 
            "text": "This can be a long and religious discussion, to make it short  DO NOT  use tabs, just spaces please.  Here are some hints to configure your editor in order to use the  stroustrup  style   Emacs :\n    Add this to your  .emacs   (setq c-default-style  stroustrup  c-basic-offset 5)\n(setq indent-tabs-mode nil)   Vim :\n    Set in your config file these variables   :set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5   Eclipse :\n    Here is a  plugin  for astyle in eclipse.\n    Read also\n     How to change indentation width in eclipse?", 
            "title": "Tabs vs Spaces"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#comments", 
            "text": "Comments and commit messages have to be written in  English . Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Comments"
        }, 
        {
            "location": "/contributing/workflow/", 
            "text": "Workflow\n\n\nThis is a git-specific workflow that helps you contribute flawlessly you JuPedSim.\n\n\n\n\nClone the project (for the first time)\n\n\n\n\n    git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git\n\n\n\n\n\n\nChange to the developement branch and create a branch with your feature.\n\n\n\n\n    git checkout developement \n    git checkout -b feature_name\n\n\n\n\n\n\nWrite code and Commit changes\n\n\n\n\n    git commit -m \nDescribe here your changes\n\n\n\n\n\n\n\nPush your branch to GitLab. But before doing so, \ntest\n your code.\n\n\n\n\n    git push origin feature_name\n\n\n\n\n\n\n\n\nCreate a merge request\n\n\na \nMaster\n will review your code \n merge it to the developement branch (maybe).\n\n\n\n\n\n\nTips Working with Git\n\n\n\n\nPull frequently.\n\n\nCommit often, but don\u2019t push every commit.\n\n\nPush when changes are tested.\n\n\n\n\nSee also \n8 Tips to help you work better with Git\n.\n\n\n\n\nTop Tip\n: Your code is maybe fine if you see on the repository\ns front page this symbol\n\n before your commit.", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#workflow", 
            "text": "This is a git-specific workflow that helps you contribute flawlessly you JuPedSim.   Clone the project (for the first time)       git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git   Change to the developement branch and create a branch with your feature.       git checkout developement \n    git checkout -b feature_name   Write code and Commit changes       git commit -m  Describe here your changes    Push your branch to GitLab. But before doing so,  test  your code.       git push origin feature_name    Create a merge request  a  Master  will review your code   merge it to the developement branch (maybe).", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#tips-working-with-git", 
            "text": "Pull frequently.  Commit often, but don\u2019t push every commit.  Push when changes are tested.   See also  8 Tips to help you work better with Git .   Top Tip : Your code is maybe fine if you see on the repository s front page this symbol  before your commit.", 
            "title": "Tips Working with Git"
        }, 
        {
            "location": "/contributing/utest/", 
            "text": "Unit testing, verification and validation tests\n\n\nTesting should be enabled by cmake as follows:\n\n\ncmake -DBUILD_TESTING=ON ..\n\n\n\n\nAfter compiling (\nmake\n) the tests can be called as follows:\n\n\nctest\n\n\n\n\nThis will take some hours time (depending on your machine). Threfore, a quick testing could be used:\n\n\nctest -R Boost\n\n\n\n\nwhich run a limited set of tests on the code.\n\n\nWriting a unit test\n\n\nIf you write a unit test the first lines in your file should be\n\n\n#define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include \nboost/test/unit_test.hpp\n\n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)\n\n\n\n\nThen you can start implementing your test cases by using\n\n\nBOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }\n\n\n\n\nFor each method or function you want to test you should write a new test case and give it a speaking name.\n\n\nVerification and validation\n\n\nBesides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for \nJuPedSim\n (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.\n\n\nTo write additional tests, create a directory under \nUtest/\n.\n\n\n\n\nCreate in \n./jpscore/Utest/\n a new direct with a descriptive name. For\n   example: \n/Utest/test_case1/\n\n\nPut in that directory an ini-file (referred to as \nmaster-inifile\n)\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax\n\n\n\n\nExample:\n\n\n   \nmax_sim_time\n[3,4]\n/max_sim_time\n \n   \nseed\nrange(1, 10)\n/seed\n\n\n\n\n\n\n\nrun the script \nmakeini.py\n with the obligatory option \n-f\n: Using the\n    aforementioned example the call is:\n\n\n\n\n   python makeini.py -f test_case1/inifile.xml\n\n\n\n\nThe Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory \ninifiles\n.\n\n\n\n\nWrite a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.\n\n\n\n\nYour script has to start with the following lines:\n\n\n#!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *\n\n\n\n\nAfter including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.\n\n\ndef runtest(inifile, trajfile):\n\n\n\n\nYou can also use more than these arguments like this:\n\n\ndef runtest(inifile, trajfile, x, y, z):\n\n\n\n\nIf you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like\n\n\nif condition_fails: \n  exit(FAILURE)\n\n\n\n\nOnce you have written your test you have to make your script executable, so it has to contain a main function which calls the test:\n\n\nif __name__ == \n__main__\n:\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info(\n%s exits with SUCCESS\n % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Unit testing"
        }, 
        {
            "location": "/contributing/utest/#unit-testing-verification-and-validation-tests", 
            "text": "Testing should be enabled by cmake as follows:  cmake -DBUILD_TESTING=ON ..  After compiling ( make ) the tests can be called as follows:  ctest  This will take some hours time (depending on your machine). Threfore, a quick testing could be used:  ctest -R Boost  which run a limited set of tests on the code.", 
            "title": "Unit testing, verification and validation tests"
        }, 
        {
            "location": "/contributing/utest/#writing-a-unit-test", 
            "text": "If you write a unit test the first lines in your file should be  #define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include  boost/test/unit_test.hpp \n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)  Then you can start implementing your test cases by using  BOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }  For each method or function you want to test you should write a new test case and give it a speaking name.", 
            "title": "Writing a unit test"
        }, 
        {
            "location": "/contributing/utest/#verification-and-validation", 
            "text": "Besides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for  JuPedSim  (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.  To write additional tests, create a directory under  Utest/ .   Create in  ./jpscore/Utest/  a new direct with a descriptive name. For\n   example:  /Utest/test_case1/  Put in that directory an ini-file (referred to as  master-inifile )\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax   Example:      max_sim_time [3,4] /max_sim_time  \n    seed range(1, 10) /seed    run the script  makeini.py  with the obligatory option  -f : Using the\n    aforementioned example the call is:      python makeini.py -f test_case1/inifile.xml  The Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory  inifiles .   Write a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.   Your script has to start with the following lines:  #!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *  After including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.  def runtest(inifile, trajfile):  You can also use more than these arguments like this:  def runtest(inifile, trajfile, x, y, z):  If you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like  if condition_fails: \n  exit(FAILURE)  Once you have written your test you have to make your script executable, so it has to contain a main function which calls the test:  if __name__ ==  __main__ :\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info( %s exits with SUCCESS  % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Verification and validation"
        }, 
        {
            "location": "/models/operativ/", 
            "text": "Operational models\n\n\ntodo", 
            "title": "Operational models"
        }, 
        {
            "location": "/models/operativ/#operational-models", 
            "text": "todo", 
            "title": "Operational models"
        }, 
        {
            "location": "/models/direction/", 
            "text": "Direction strategies\n\n\ntodo", 
            "title": "Direction strategies"
        }, 
        {
            "location": "/models/direction/#direction-strategies", 
            "text": "todo", 
            "title": "Direction strategies"
        }, 
        {
            "location": "/models/routing/", 
            "text": "Routing strategies\n\n\ntodo", 
            "title": "Routing"
        }, 
        {
            "location": "/models/routing/#routing-strategies", 
            "text": "todo", 
            "title": "Routing strategies"
        }, 
        {
            "location": "/about/disclaimer/", 
            "text": "Disclaimer\n\n\nIn no event shall JuPedSim be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if\nJuPedSim has been advised of the possibility of such damage.\n\n\nJuPedSim specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided \nas is\n. JuPedSim has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.\n\n\nForschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of JuPedSim, and accepts no responsibility for its use. Users\nof JuPedSim assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.\n\n\nUsers are warned that JuPedSim is intended for \nacademic\n use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/disclaimer/#disclaimer", 
            "text": "In no event shall JuPedSim be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if\nJuPedSim has been advised of the possibility of such damage.  JuPedSim specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided  as is . JuPedSim has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.  Forschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of JuPedSim, and accepts no responsibility for its use. Users\nof JuPedSim assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.  Users are warned that JuPedSim is intended for  academic  use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/LICENSE/", 
            "text": "License\n\n\n\n\n\nJuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.\n\n\nJuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see \nGNU licenses\n.", 
            "title": "License"
        }, 
        {
            "location": "/about/LICENSE/#license", 
            "text": "JuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.  JuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.  You should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see  GNU licenses .", 
            "title": "License"
        }, 
        {
            "location": "/about/contributors/", 
            "text": "Contributors\n\n\nin alphabetical order:\n\n\n\n\nAndrea, Portz\n\n\nArne, Graf\n\n\nBenjamin, Schroeder\n\n\nDavid, Haensel\n\n\nDenis, Shhikhalev\n\n\nErik, Andresen\n\n\nJun, Zhang\n\n\nMohcine, Chraibi\n\n\nOliver, Schmidts\n\n\nUlrich, Kemloh\n\n\nWeichen, Liao", 
            "title": "Contributors"
        }, 
        {
            "location": "/about/contributors/#contributors", 
            "text": "in alphabetical order:   Andrea, Portz  Arne, Graf  Benjamin, Schroeder  David, Haensel  Denis, Shhikhalev  Erik, Andresen  Jun, Zhang  Mohcine, Chraibi  Oliver, Schmidts  Ulrich, Kemloh  Weichen, Liao", 
            "title": "Contributors"
        }
    ]
}